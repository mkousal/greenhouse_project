
greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000530  000005c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000530  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800106  00800106  000005ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f6  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2e  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000883  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fd  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d3  00000000  00000000  00003581  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__vector_13>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_18>
  4c:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_19>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	49 32       	cpi	r20, 0x29	; 41
  6a:	43 20       	and	r4, r3
  6c:	65 72       	andi	r22, 0x25	; 37
  6e:	72 0d       	add	r23, r2
  70:	0a 00       	.word	0x000a	; ????

00000072 <__c.2086>:
  72:	0d 0a 47 72 65 65 6e 68 6f 75 73 65 20 4d 26 43     ..Greenhouse M&C
  82:	20 73 79 73 74 65 6d 20 73 74 61 72 74 65 64 0d      system started.
  92:	0a 00                                               ..

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d8 e0       	ldi	r29, 0x08	; 8
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 e3       	ldi	r30, 0x30	; 48
  a8:	f5 e0       	ldi	r31, 0x05	; 5
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a6 30       	cpi	r26, 0x06	; 6
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	a6 e0       	ldi	r26, 0x06	; 6
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
  be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
  c0:	ab 38       	cpi	r26, 0x8B	; 139
  c2:	b2 07       	cpc	r27, r18
  c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
  c6:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  ca:	0c 94 96 02 	jmp	0x52c	; 0x52c <_exit>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <GPIO_config_output>:

void GPIO_config_input_pullup (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name &= ~(1<<pin_num);
	reg_name++;
	*reg_name |= (1<<pin_num);
  d2:	fc 01       	movw	r30, r24
  d4:	40 81       	ld	r20, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <GPIO_config_output+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <GPIO_config_output+0xa>
  e4:	24 2b       	or	r18, r20
  e6:	20 83       	st	Z, r18
  e8:	08 95       	ret

000000ea <GPIO_write_low>:
}

void GPIO_write_low (volatile uint8_t *reg_name, uint8_t pin_num)
{
  ea:	fc 01       	movw	r30, r24
	*reg_name &= ~(1<<pin_num);
  ec:	90 81       	ld	r25, Z
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_write_low+0xe>
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_write_low+0xa>
  fc:	20 95       	com	r18
  fe:	29 23       	and	r18, r25
 100:	20 83       	st	Z, r18
 102:	08 95       	ret

00000104 <GPIO_write_high>:
}

void GPIO_write_high (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num);
 104:	fc 01       	movw	r30, r24
 106:	40 81       	ld	r20, Z
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_write_high+0xe>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_write_high+0xa>
 116:	24 2b       	or	r18, r20
 118:	20 83       	st	Z, r18
 11a:	08 95       	ret

0000011c <initRelay>:
#include "twi.h"
#include <util/delay.h>

void initRelay()
{
	GPIO_config_output(&RELAY_PORT, RELAY_1);
 11c:	67 e0       	ldi	r22, 0x07	; 7
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	8b e2       	ldi	r24, 0x2B	; 43
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_config_output>
	GPIO_config_output(&RELAY_PORT, RELAY_2);
 128:	66 e0       	ldi	r22, 0x06	; 6
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_config_output>
	GPIO_config_output(&RELAY_PORT, RELAY_3);
 134:	65 e0       	ldi	r22, 0x05	; 5
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_config_output>
	GPIO_config_output(&RELAY_PORT, RELAY_4);
 140:	64 e0       	ldi	r22, 0x04	; 4
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 69 00 	call	0xd2	; 0xd2 <GPIO_config_output>
 14c:	08 95       	ret

0000014e <main>:
}

int main(void)
{
	initRelay();
 14e:	0e 94 8e 00 	call	0x11c	; 0x11c <initRelay>
	GPIO_write_high(&RELAY_PORT, RELAY_3);
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	8b e2       	ldi	r24, 0x2B	; 43
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 82 00 	call	0x104	; 0x104 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	89 e6       	ldi	r24, 0x69	; 105
 162:	98 e1       	ldi	r25, 0x18	; 24
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x16>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x20>
 16e:	00 00       	nop
	_delay_ms(500);
	GPIO_write_low(&RELAY_PORT, RELAY_3);
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	8b e2       	ldi	r24, 0x2B	; 43
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 75 00 	call	0xea	; 0xea <GPIO_write_low>
	twi_init();
 17c:	0e 94 6f 01 	call	0x2de	; 0x2de <twi_init>
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 180:	87 e6       	ldi	r24, 0x67	; 103
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 15 02 	call	0x42a	; 0x42a <uart_init>
	
	uart_puts_P("\r\nGreenhouse M&C system started\r\n");
 188:	82 e7       	ldi	r24, 0x72	; 114
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <uart_puts_p>
	
	TIM1_overflow_4s();
 190:	e1 e8       	ldi	r30, 0x81	; 129
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	80 83       	st	Z, r24
 19a:	80 81       	ld	r24, Z
 19c:	85 60       	ori	r24, 0x05	; 5
 19e:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 1a0:	ef e6       	ldi	r30, 0x6F	; 111
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	81 60       	ori	r24, 0x01	; 1
 1a8:	80 83       	st	Z, r24
	
	sei();
 1aa:	78 94       	sei
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <main+0x5e>

000001ae <__vector_13>:
    {
    }
}

ISR(TIMER1_OVF_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <__vector_13+0x30>
 1de:	1f 92       	push	r1
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);
 1e4:	88 eb       	ldi	r24, 0xB8	; 184
 1e6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <twi_start>
	char tmp_str[3] = "   ";
 1ea:	20 e2       	ldi	r18, 0x20	; 32
 1ec:	30 e2       	ldi	r19, 0x20	; 32
 1ee:	3a 83       	std	Y+2, r19	; 0x02
 1f0:	29 83       	std	Y+1, r18	; 0x01
 1f2:	90 e2       	ldi	r25, 0x20	; 32
 1f4:	9b 83       	std	Y+3, r25	; 0x03
	
	if (res == 0)
 1f6:	81 11       	cpse	r24, r1
 1f8:	54 c0       	rjmp	.+168    	; 0x2a2 <__vector_13+0xf4>
	{
		twi_write(0);
 1fa:	0e 94 9b 01 	call	0x336	; 0x336 <twi_write>
		twi_start((DHT12_ADDR << 1)+TWI_READ);
 1fe:	89 eb       	ldi	r24, 0xB9	; 185
 200:	0e 94 7e 01 	call	0x2fc	; 0x2fc <twi_start>
		uint8_t hum_H = twi_read_ack();
 204:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_ack>
 208:	e8 2e       	mov	r14, r24
		uint8_t hum_L = twi_read_ack();
 20a:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_ack>
 20e:	f8 2e       	mov	r15, r24
		uint8_t temp_H = twi_read_ack();
 210:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_ack>
 214:	08 2f       	mov	r16, r24
		uint8_t temp_L = twi_read_nack();
 216:	0e 94 af 01 	call	0x35e	; 0x35e <twi_read_nack>
 21a:	18 2f       	mov	r17, r24
		twi_stop();
 21c:	0e 94 b9 01 	call	0x372	; 0x372 <twi_stop>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 220:	4a e0       	ldi	r20, 0x0A	; 10
 222:	be 01       	movw	r22, r28
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	8e 2d       	mov	r24, r14
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__itoa_ncheck>
		itoa(hum_H, tmp_str, 10);
		uart_puts(tmp_str);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
		uart_puts(" ");
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
 240:	4a e0       	ldi	r20, 0x0A	; 10
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	8f 2d       	mov	r24, r15
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__itoa_ncheck>
		itoa(hum_L, tmp_str, 10);
		uart_puts(tmp_str);
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
		uart_puts(" ");
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	be 01       	movw	r22, r28
 264:	6f 5f       	subi	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	80 2f       	mov	r24, r16
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__itoa_ncheck>
		itoa(temp_H, tmp_str, 10);
		uart_puts(tmp_str);
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
		uart_puts(" ");
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
 280:	4a e0       	ldi	r20, 0x0A	; 10
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	81 2f       	mov	r24, r17
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__itoa_ncheck>
		itoa(temp_L, tmp_str, 10);
		uart_puts(tmp_str);
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
		uart_puts("\r\n");
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 45 02 	call	0x48a	; 0x48a <uart_puts>
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <__vector_13+0xfc>
	}
	else
		uart_puts_P("I2C err\r\n");
 2a2:	88 e6       	ldi	r24, 0x68	; 104
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <uart_puts_p>
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 2de:	87 b1       	in	r24, 0x07	; 7
 2e0:	8f 7c       	andi	r24, 0xCF	; 207
 2e2:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 2e4:	88 b1       	in	r24, 0x08	; 8
 2e6:	80 63       	ori	r24, 0x30	; 48
 2e8:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 2ea:	e9 eb       	ldi	r30, 0xB9	; 185
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	8c 7f       	andi	r24, 0xFC	; 252
 2f2:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 2f4:	88 e9       	ldi	r24, 0x98	; 152
 2f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2fa:	08 95       	ret

000002fc <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 2fc:	94 ea       	ldi	r25, 0xA4	; 164
 2fe:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 302:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 306:	99 23       	and	r25, r25
 308:	e4 f7       	brge	.-8      	; 0x302 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 30a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 30e:	84 e8       	ldi	r24, 0x84	; 132
 310:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 314:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 318:	88 23       	and	r24, r24
 31a:	e4 f7       	brge	.-8      	; 0x314 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 31c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 320:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 322:	88 31       	cpi	r24, 0x18	; 24
 324:	21 f0       	breq	.+8      	; 0x32e <twi_start+0x32>
 326:	80 34       	cpi	r24, 0x40	; 64
 328:	21 f4       	brne	.+8      	; 0x332 <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 332:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 334:	08 95       	ret

00000336 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 336:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 33a:	84 e8       	ldi	r24, 0x84	; 132
 33c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 340:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 344:	88 23       	and	r24, r24
 346:	e4 f7       	brge	.-8      	; 0x340 <twi_write+0xa>
}
 348:	08 95       	ret

0000034a <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 34a:	84 ec       	ldi	r24, 0xC4	; 196
 34c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 350:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 354:	88 23       	and	r24, r24
 356:	e4 f7       	brge	.-8      	; 0x350 <twi_read_ack+0x6>
    return (TWDR);
 358:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 35c:	08 95       	ret

0000035e <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 35e:	84 e8       	ldi	r24, 0x84	; 132
 360:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 364:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 368:	88 23       	and	r24, r24
 36a:	e4 f7       	brge	.-8      	; 0x364 <twi_read_nack+0x6>
    return (TWDR);
 36c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 370:	08 95       	ret

00000372 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 372:	84 e9       	ldi	r24, 0x94	; 148
 374:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 378:	08 95       	ret

0000037a <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
 38e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 392:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 396:	8c 71       	andi	r24, 0x1C	; 28
 398:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <UART_RxHead>
 39c:	ef 5f       	subi	r30, 0xFF	; 255
 39e:	ef 73       	andi	r30, 0x3F	; 63
 3a0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_RxTail>
 3a4:	e9 17       	cp	r30, r25
 3a6:	39 f0       	breq	.+14     	; 0x3b6 <__vector_18+0x3c>
 3a8:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <UART_RxHead>
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	e5 5f       	subi	r30, 0xF5	; 245
 3b0:	fe 4f       	sbci	r31, 0xFE	; 254
 3b2:	20 83       	st	Z, r18
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <__vector_18+0x3e>
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 3bc:	89 2b       	or	r24, r25
 3be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <__vector_19>:
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
 3e8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <UART_TxHead>
 3ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <UART_TxTail>
 3f0:	98 17       	cp	r25, r24
 3f2:	69 f0       	breq	.+26     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <UART_TxTail>
 3f8:	ef 5f       	subi	r30, 0xFF	; 255
 3fa:	ef 73       	andi	r30, 0x3F	; 63
 3fc:	e0 93 09 01 	sts	0x0109, r30	; 0x800109 <UART_TxTail>
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	e5 5b       	subi	r30, 0xB5	; 181
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	80 81       	ld	r24, Z
 408:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 40e:	e1 ec       	ldi	r30, 0xC1	; 193
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	8f 7d       	andi	r24, 0xDF	; 223
 416:	80 83       	st	Z, r24
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <uart_init>:
 42a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <UART_TxHead>
 42e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <UART_TxTail>
 432:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <UART_RxHead>
 436:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <UART_RxTail>
 43a:	28 2f       	mov	r18, r24
 43c:	39 2f       	mov	r19, r25
 43e:	33 23       	and	r19, r19
 440:	1c f4       	brge	.+6      	; 0x448 <uart_init+0x1e>
 442:	22 e0       	ldi	r18, 0x02	; 2
 444:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 448:	90 78       	andi	r25, 0x80	; 128
 44a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 44e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 452:	88 e9       	ldi	r24, 0x98	; 152
 454:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 45e:	08 95       	ret

00000460 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 460:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <UART_TxHead>
 464:	2f 5f       	subi	r18, 0xFF	; 255
 466:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 468:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <UART_TxTail>
 46c:	29 17       	cp	r18, r25
 46e:	e1 f3       	breq	.-8      	; 0x468 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 470:	e2 2f       	mov	r30, r18
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	e5 5b       	subi	r30, 0xB5	; 181
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 47a:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 47e:	e1 ec       	ldi	r30, 0xC1	; 193
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 62       	ori	r24, 0x20	; 32
 486:	80 83       	st	Z, r24
 488:	08 95       	ret

0000048a <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ec 01       	movw	r28, r24
    while (*s)
 490:	03 c0       	rjmp	.+6      	; 0x498 <uart_puts+0xe>
        uart_putc(*s++);
 492:	21 96       	adiw	r28, 0x01	; 1
 494:	0e 94 30 02 	call	0x460	; 0x460 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 498:	88 81       	ld	r24, Y
 49a:	81 11       	cpse	r24, r1
 49c:	fa cf       	rjmp	.-12     	; 0x492 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 4aa:	03 c0       	rjmp	.+6      	; 0x4b2 <uart_puts_p+0xe>
        uart_putc(c);
 4ac:	0e 94 30 02 	call	0x460	; 0x460 <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 4b0:	fe 01       	movw	r30, r28
 4b2:	ef 01       	movw	r28, r30
 4b4:	21 96       	adiw	r28, 0x01	; 1
 4b6:	84 91       	lpm	r24, Z
 4b8:	81 11       	cpse	r24, r1
 4ba:	f8 cf       	rjmp	.-16     	; 0x4ac <uart_puts_p+0x8>
        uart_putc(c);
}/* uart_puts_p */
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <__itoa_ncheck>:
 4c2:	bb 27       	eor	r27, r27
 4c4:	4a 30       	cpi	r20, 0x0A	; 10
 4c6:	31 f4       	brne	.+12     	; 0x4d4 <__itoa_ncheck+0x12>
 4c8:	99 23       	and	r25, r25
 4ca:	22 f4       	brpl	.+8      	; 0x4d4 <__itoa_ncheck+0x12>
 4cc:	bd e2       	ldi	r27, 0x2D	; 45
 4ce:	90 95       	com	r25
 4d0:	81 95       	neg	r24
 4d2:	9f 4f       	sbci	r25, 0xFF	; 255
 4d4:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__utoa_common>

000004d8 <__utoa_ncheck>:
 4d8:	bb 27       	eor	r27, r27

000004da <__utoa_common>:
 4da:	fb 01       	movw	r30, r22
 4dc:	55 27       	eor	r21, r21
 4de:	aa 27       	eor	r26, r26
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	aa 1f       	adc	r26, r26
 4e6:	a4 17       	cp	r26, r20
 4e8:	10 f0       	brcs	.+4      	; 0x4ee <__utoa_common+0x14>
 4ea:	a4 1b       	sub	r26, r20
 4ec:	83 95       	inc	r24
 4ee:	50 51       	subi	r21, 0x10	; 16
 4f0:	b9 f7       	brne	.-18     	; 0x4e0 <__utoa_common+0x6>
 4f2:	a0 5d       	subi	r26, 0xD0	; 208
 4f4:	aa 33       	cpi	r26, 0x3A	; 58
 4f6:	08 f0       	brcs	.+2      	; 0x4fa <__utoa_common+0x20>
 4f8:	a9 5d       	subi	r26, 0xD9	; 217
 4fa:	a1 93       	st	Z+, r26
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	79 f7       	brne	.-34     	; 0x4de <__utoa_common+0x4>
 500:	b1 11       	cpse	r27, r1
 502:	b1 93       	st	Z+, r27
 504:	11 92       	st	Z+, r1
 506:	cb 01       	movw	r24, r22
 508:	0c 94 86 02 	jmp	0x50c	; 0x50c <strrev>

0000050c <strrev>:
 50c:	dc 01       	movw	r26, r24
 50e:	fc 01       	movw	r30, r24
 510:	67 2f       	mov	r22, r23
 512:	71 91       	ld	r23, Z+
 514:	77 23       	and	r23, r23
 516:	e1 f7       	brne	.-8      	; 0x510 <strrev+0x4>
 518:	32 97       	sbiw	r30, 0x02	; 2
 51a:	04 c0       	rjmp	.+8      	; 0x524 <strrev+0x18>
 51c:	7c 91       	ld	r23, X
 51e:	6d 93       	st	X+, r22
 520:	70 83       	st	Z, r23
 522:	62 91       	ld	r22, -Z
 524:	ae 17       	cp	r26, r30
 526:	bf 07       	cpc	r27, r31
 528:	c8 f3       	brcs	.-14     	; 0x51c <strrev+0x10>
 52a:	08 95       	ret

0000052c <_exit>:
 52c:	f8 94       	cli

0000052e <__stop_program>:
 52e:	ff cf       	rjmp	.-2      	; 0x52e <__stop_program>
