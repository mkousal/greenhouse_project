
greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800100  00800100  00000522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001252  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad5  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ea  00000000  00000000  0000240b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f7  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b8  00000000  00000000  000035cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003c83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_18>
  4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_19>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	0d 0a       	sbc	r0, r29
  6a:	47 72       	andi	r20, 0x27	; 39
  6c:	65 65       	ori	r22, 0x55	; 85
  6e:	6e 68       	ori	r22, 0x8E	; 142
  70:	6f 75       	andi	r22, 0x5F	; 95
  72:	73 65       	ori	r23, 0x53	; 83
  74:	20 4d       	sbci	r18, 0xD0	; 208
  76:	26 43       	sbci	r18, 0x36	; 54
  78:	20 73       	andi	r18, 0x30	; 48
  7a:	79 73       	andi	r23, 0x39	; 57
  7c:	74 65       	ori	r23, 0x54	; 84
  7e:	6d 20       	and	r6, r13
  80:	73 74       	andi	r23, 0x43	; 67
  82:	61 72       	andi	r22, 0x21	; 33
  84:	74 65       	ori	r23, 0x54	; 84
  86:	64 0d       	add	r22, r4
  88:	0a 00       	.word	0x000a	; ????

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a5 38       	cpi	r26, 0x85	; 133
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  aa:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <DHT_getTemperature>:
#include "dht.h"
#include "gpio.h"
#include "twi.h"

int DHT_getTemperature()
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);
  b6:	88 eb       	ldi	r24, 0xB8	; 184
  b8:	0e 94 3d 01 	call	0x27a	; 0x27a <twi_start>
	uint8_t temp_H, temp_L = 0;
	if (res == 0)
  bc:	81 11       	cpse	r24, r1
  be:	16 c0       	rjmp	.+44     	; 0xec <DHT_getTemperature+0x3a>
	{
		twi_write(2);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <twi_write>
		twi_start((DHT12_ADDR << 1) + TWI_READ);
  c6:	89 eb       	ldi	r24, 0xB9	; 185
  c8:	0e 94 3d 01 	call	0x27a	; 0x27a <twi_start>
		temp_H = twi_read_ack();
  cc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <twi_read_ack>
  d0:	c8 2f       	mov	r28, r24
		temp_L = twi_read_nack();
  d2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <twi_read_nack>
  d6:	d8 2f       	mov	r29, r24
		twi_stop();
  d8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <twi_stop>
		uint8_t tmp = temp_L;
		temp_L &= 0x7F;	// Set MSB to '0'
  dc:	8d 2f       	mov	r24, r29
  de:	8f 77       	andi	r24, 0x7F	; 127
		if (temp_L > 4)	// Round up decimal place
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	08 f0       	brcs	.+2      	; 0xe6 <DHT_getTemperature+0x34>
			temp_H++;
  e4:	cf 5f       	subi	r28, 0xFF	; 255

		if ((tmp & 0x80) != 0)	// Negative temperature
  e6:	dd 23       	and	r29, r29
  e8:	0c f4       	brge	.+2      	; 0xec <DHT_getTemperature+0x3a>
		{
			temp_H *= -1;
  ea:	c1 95       	neg	r28
		}
	}
	
	return temp_H;
}
  ec:	8c 2f       	mov	r24, r28
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <GPIO_config_output>:

void GPIO_config_input_pullup (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name &= ~(1<<pin_num);
	reg_name++;
	*reg_name |= (1<<pin_num);
  f6:	fc 01       	movw	r30, r24
  f8:	40 81       	ld	r20, Z
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_config_output+0xe>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_config_output+0xa>
 108:	24 2b       	or	r18, r20
 10a:	20 83       	st	Z, r18
 10c:	08 95       	ret

0000010e <GPIO_write_low>:
}

void GPIO_write_low (volatile uint8_t *reg_name, uint8_t pin_num)
{
 10e:	fc 01       	movw	r30, r24
	*reg_name &= ~(1<<pin_num);
 110:	90 81       	ld	r25, Z
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <GPIO_write_low+0xe>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <GPIO_write_low+0xa>
 120:	20 95       	com	r18
 122:	29 23       	and	r18, r25
 124:	20 83       	st	Z, r18
 126:	08 95       	ret

00000128 <GPIO_write_high>:
}

void GPIO_write_high (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num);
 128:	fc 01       	movw	r30, r24
 12a:	40 81       	ld	r20, Z
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_write_high+0xe>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_write_high+0xa>
 13a:	24 2b       	or	r18, r20
 13c:	20 83       	st	Z, r18
 13e:	08 95       	ret

00000140 <initRelay>:
#include "twi.h"
#include <util/delay.h>

void initRelay()
{
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_1);
 140:	67 e0       	ldi	r22, 0x07	; 7
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	8a e2       	ldi	r24, 0x2A	; 42
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_2);
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	8a e2       	ldi	r24, 0x2A	; 42
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_3);
 158:	65 e0       	ldi	r22, 0x05	; 5
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	8a e2       	ldi	r24, 0x2A	; 42
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_4);
 164:	64 e0       	ldi	r22, 0x04	; 4
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	8a e2       	ldi	r24, 0x2A	; 42
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_config_output>
 170:	08 95       	ret

00000172 <relayOn>:
}

void relayOn(uint8_t relay)
{
	GPIO_write_high(&RELAY_PORT, relay);
 172:	68 2f       	mov	r22, r24
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	8b e2       	ldi	r24, 0x2B	; 43
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_write_high>
 17e:	08 95       	ret

00000180 <relayOff>:
}

void relayOff(uint8_t relay)
{
	GPIO_write_low(&RELAY_PORT, relay);
 180:	68 2f       	mov	r22, r24
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	8b e2       	ldi	r24, 0x2B	; 43
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 87 00 	call	0x10e	; 0x10e <GPIO_write_low>
 18c:	08 95       	ret

0000018e <main>:
}

int main(void)
{
	initRelay();
 18e:	0e 94 a0 00 	call	0x140	; 0x140 <initRelay>
	twi_init();
 192:	0e 94 2e 01 	call	0x25c	; 0x25c <twi_init>
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <uart_init>
	
	uart_puts_P("\r\nGreenhouse M&C system started\r\n");
 19e:	88 e6       	ldi	r24, 0x68	; 104
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 11 02 	call	0x422	; 0x422 <uart_puts_p>
	
	TIM1_overflow_4s();
 1a6:	e1 e8       	ldi	r30, 0x81	; 129
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	8d 7f       	andi	r24, 0xFD	; 253
 1ae:	80 83       	st	Z, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	85 60       	ori	r24, 0x05	; 5
 1b4:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 1b6:	ef e6       	ldi	r30, 0x6F	; 111
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	80 83       	st	Z, r24
	
	sei();
 1c0:	78 94       	sei
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x34>

000001c4 <__vector_13>:
    {
    }
}

ISR(TIMER1_OVF_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	26 97       	sbiw	r28, 0x06	; 6
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61
// 	}
// 	else
// 		uart_puts_P("I2C err\r\n");

	char tmp_str[6];
	int tmp = DHT_getTemperature();
 1f8:	0e 94 59 00 	call	0xb2	; 0xb2 <DHT_getTemperature>
 1fc:	8c 01       	movw	r16, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1fe:	4a e0       	ldi	r20, 0x0A	; 10
 200:	be 01       	movw	r22, r28
 202:	6f 5f       	subi	r22, 0xFF	; 255
 204:	7f 4f       	sbci	r23, 0xFF	; 255
 206:	0e 94 20 02 	call	0x440	; 0x440 <__itoa_ncheck>
	itoa(tmp, tmp_str, 10);
	uart_puts(tmp_str);
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 04 02 	call	0x408	; 0x408 <uart_puts>
	if (tmp > 28)
 212:	0d 31       	cpi	r16, 0x1D	; 29
 214:	11 05       	cpc	r17, r1
 216:	24 f0       	brlt	.+8      	; 0x220 <__vector_13+0x5c>
	{
		relayOn(RELAY_1);
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	0e 94 b9 00 	call	0x172	; 0x172 <relayOn>
 21e:	03 c0       	rjmp	.+6      	; 0x226 <__vector_13+0x62>
	}
	else
	{
		relayOff(RELAY_1);
 220:	87 e0       	ldi	r24, 0x07	; 7
 222:	0e 94 c0 00 	call	0x180	; 0x180 <relayOff>
	}
 226:	26 96       	adiw	r28, 0x06	; 6
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 25c:	87 b1       	in	r24, 0x07	; 7
 25e:	8f 7c       	andi	r24, 0xCF	; 207
 260:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 262:	88 b1       	in	r24, 0x08	; 8
 264:	80 63       	ori	r24, 0x30	; 48
 266:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 268:	e9 eb       	ldi	r30, 0xB9	; 185
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8c 7f       	andi	r24, 0xFC	; 252
 270:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 272:	88 e9       	ldi	r24, 0x98	; 152
 274:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 278:	08 95       	ret

0000027a <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 27a:	94 ea       	ldi	r25, 0xA4	; 164
 27c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 280:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 284:	99 23       	and	r25, r25
 286:	e4 f7       	brge	.-8      	; 0x280 <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 288:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 28c:	84 e8       	ldi	r24, 0x84	; 132
 28e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 292:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 296:	88 23       	and	r24, r24
 298:	e4 f7       	brge	.-8      	; 0x292 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 29a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 29e:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 2a0:	88 31       	cpi	r24, 0x18	; 24
 2a2:	21 f0       	breq	.+8      	; 0x2ac <twi_start+0x32>
 2a4:	80 34       	cpi	r24, 0x40	; 64
 2a6:	21 f4       	brne	.+8      	; 0x2b0 <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 2b0:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 2b2:	08 95       	ret

000002b4 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 2b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 2b8:	84 e8       	ldi	r24, 0x84	; 132
 2ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 2be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c2:	88 23       	and	r24, r24
 2c4:	e4 f7       	brge	.-8      	; 0x2be <twi_write+0xa>
}
 2c6:	08 95       	ret

000002c8 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 2c8:	84 ec       	ldi	r24, 0xC4	; 196
 2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 2ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d2:	88 23       	and	r24, r24
 2d4:	e4 f7       	brge	.-8      	; 0x2ce <twi_read_ack+0x6>
    return (TWDR);
 2d6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2da:	08 95       	ret

000002dc <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 2e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e6:	88 23       	and	r24, r24
 2e8:	e4 f7       	brge	.-8      	; 0x2e2 <twi_read_nack+0x6>
    return (TWDR);
 2ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2ee:	08 95       	ret

000002f0 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2f0:	84 e9       	ldi	r24, 0x94	; 148
 2f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f6:	08 95       	ret

000002f8 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	ef 93       	push	r30
 30a:	ff 93       	push	r31
 30c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 310:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 314:	8c 71       	andi	r24, 0x1C	; 28
 316:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
 31a:	ef 5f       	subi	r30, 0xFF	; 255
 31c:	ef 73       	andi	r30, 0x3F	; 63
 31e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
 322:	e9 17       	cp	r30, r25
 324:	39 f0       	breq	.+14     	; 0x334 <__vector_18+0x3c>
 326:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	eb 5f       	subi	r30, 0xFB	; 251
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	20 83       	st	Z, r18
 332:	01 c0       	rjmp	.+2      	; 0x336 <__vector_18+0x3e>
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	89 2b       	or	r24, r25
 33c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_19>:
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
 366:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 36a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 36e:	98 17       	cp	r25, r24
 370:	69 f0       	breq	.+26     	; 0x38c <__vector_19+0x38>
 372:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 376:	ef 5f       	subi	r30, 0xFF	; 255
 378:	ef 73       	andi	r30, 0x3F	; 63
 37a:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	eb 5b       	subi	r30, 0xBB	; 187
 382:	fe 4f       	sbci	r31, 0xFE	; 254
 384:	80 81       	ld	r24, Z
 386:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 38a:	05 c0       	rjmp	.+10     	; 0x396 <__vector_19+0x42>
 38c:	e1 ec       	ldi	r30, 0xC1	; 193
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	8f 7d       	andi	r24, 0xDF	; 223
 394:	80 83       	st	Z, r24
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <uart_init>:
 3a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_TxHead>
 3ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_TxTail>
 3b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_RxHead>
 3b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_RxTail>
 3b8:	28 2f       	mov	r18, r24
 3ba:	39 2f       	mov	r19, r25
 3bc:	33 23       	and	r19, r19
 3be:	1c f4       	brge	.+6      	; 0x3c6 <uart_init+0x1e>
 3c0:	22 e0       	ldi	r18, 0x02	; 2
 3c2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3c6:	90 78       	andi	r25, 0x80	; 128
 3c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3d0:	88 e9       	ldi	r24, 0x98	; 152
 3d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3dc:	08 95       	ret

000003de <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3de:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <UART_TxHead>
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 3e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_TxTail>
 3ea:	29 17       	cp	r18, r25
 3ec:	e1 f3       	breq	.-8      	; 0x3e6 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3ee:	e2 2f       	mov	r30, r18
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	eb 5b       	subi	r30, 0xBB	; 187
 3f4:	fe 4f       	sbci	r31, 0xFE	; 254
 3f6:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3f8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3fc:	e1 ec       	ldi	r30, 0xC1	; 193
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	80 62       	ori	r24, 0x20	; 32
 404:	80 83       	st	Z, r24
 406:	08 95       	ret

00000408 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
    while (*s)
 40e:	03 c0       	rjmp	.+6      	; 0x416 <uart_puts+0xe>
        uart_putc(*s++);
 410:	21 96       	adiw	r28, 0x01	; 1
 412:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 416:	88 81       	ld	r24, Y
 418:	81 11       	cpse	r24, r1
 41a:	fa cf       	rjmp	.-12     	; 0x410 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 428:	03 c0       	rjmp	.+6      	; 0x430 <uart_puts_p+0xe>
        uart_putc(c);
 42a:	0e 94 ef 01 	call	0x3de	; 0x3de <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 42e:	fe 01       	movw	r30, r28
 430:	ef 01       	movw	r28, r30
 432:	21 96       	adiw	r28, 0x01	; 1
 434:	84 91       	lpm	r24, Z
 436:	81 11       	cpse	r24, r1
 438:	f8 cf       	rjmp	.-16     	; 0x42a <uart_puts_p+0x8>
        uart_putc(c);
}/* uart_puts_p */
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <__itoa_ncheck>:
 440:	bb 27       	eor	r27, r27
 442:	4a 30       	cpi	r20, 0x0A	; 10
 444:	31 f4       	brne	.+12     	; 0x452 <__itoa_ncheck+0x12>
 446:	99 23       	and	r25, r25
 448:	22 f4       	brpl	.+8      	; 0x452 <__itoa_ncheck+0x12>
 44a:	bd e2       	ldi	r27, 0x2D	; 45
 44c:	90 95       	com	r25
 44e:	81 95       	neg	r24
 450:	9f 4f       	sbci	r25, 0xFF	; 255
 452:	0c 94 2c 02 	jmp	0x458	; 0x458 <__utoa_common>

00000456 <__utoa_ncheck>:
 456:	bb 27       	eor	r27, r27

00000458 <__utoa_common>:
 458:	fb 01       	movw	r30, r22
 45a:	55 27       	eor	r21, r21
 45c:	aa 27       	eor	r26, r26
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	aa 1f       	adc	r26, r26
 464:	a4 17       	cp	r26, r20
 466:	10 f0       	brcs	.+4      	; 0x46c <__utoa_common+0x14>
 468:	a4 1b       	sub	r26, r20
 46a:	83 95       	inc	r24
 46c:	50 51       	subi	r21, 0x10	; 16
 46e:	b9 f7       	brne	.-18     	; 0x45e <__utoa_common+0x6>
 470:	a0 5d       	subi	r26, 0xD0	; 208
 472:	aa 33       	cpi	r26, 0x3A	; 58
 474:	08 f0       	brcs	.+2      	; 0x478 <__utoa_common+0x20>
 476:	a9 5d       	subi	r26, 0xD9	; 217
 478:	a1 93       	st	Z+, r26
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	79 f7       	brne	.-34     	; 0x45c <__utoa_common+0x4>
 47e:	b1 11       	cpse	r27, r1
 480:	b1 93       	st	Z+, r27
 482:	11 92       	st	Z+, r1
 484:	cb 01       	movw	r24, r22
 486:	0c 94 45 02 	jmp	0x48a	; 0x48a <strrev>

0000048a <strrev>:
 48a:	dc 01       	movw	r26, r24
 48c:	fc 01       	movw	r30, r24
 48e:	67 2f       	mov	r22, r23
 490:	71 91       	ld	r23, Z+
 492:	77 23       	and	r23, r23
 494:	e1 f7       	brne	.-8      	; 0x48e <strrev+0x4>
 496:	32 97       	sbiw	r30, 0x02	; 2
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <strrev+0x18>
 49a:	7c 91       	ld	r23, X
 49c:	6d 93       	st	X+, r22
 49e:	70 83       	st	Z, r23
 4a0:	62 91       	ld	r22, -Z
 4a2:	ae 17       	cp	r26, r30
 4a4:	bf 07       	cpc	r27, r31
 4a6:	c8 f3       	brcs	.-14     	; 0x49a <strrev+0x10>
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
