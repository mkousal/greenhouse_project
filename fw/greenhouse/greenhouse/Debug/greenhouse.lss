
greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800100  00800100  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a6  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a56  00000000  00000000  000017ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ac  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000609  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000714  00000000  00000000  000034d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003bed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_18>
  4c:	0c 94 91 01 	jmp	0x322	; 0x322 <__vector_19>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	0d 0a       	sbc	r0, r29
  6a:	47 72       	andi	r20, 0x27	; 39
  6c:	65 65       	ori	r22, 0x55	; 85
  6e:	6e 68       	ori	r22, 0x8E	; 142
  70:	6f 75       	andi	r22, 0x5F	; 95
  72:	73 65       	ori	r23, 0x53	; 83
  74:	20 4d       	sbci	r18, 0xD0	; 208
  76:	26 43       	sbci	r18, 0x36	; 54
  78:	20 73       	andi	r18, 0x30	; 48
  7a:	79 73       	andi	r23, 0x39	; 57
  7c:	74 65       	ori	r23, 0x54	; 84
  7e:	6d 20       	and	r6, r13
  80:	73 74       	andi	r23, 0x43	; 67
  82:	61 72       	andi	r22, 0x21	; 33
  84:	74 65       	ori	r23, 0x54	; 84
  86:	64 0d       	add	r22, r4
  88:	0a 00       	.word	0x000a	; ????

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	aa 38       	cpi	r26, 0x8A	; 138
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  aa:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <DHT_getTemperature>:
#include "dht.h"
#include "gpio.h"
#include "twi.h"

int DHT_getTemperature()
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
  b6:	88 eb       	ldi	r24, 0xB8	; 184
  b8:	0e 94 24 01 	call	0x248	; 0x248 <twi_start>
	uint8_t temp_H = 0;										// Init data variables
	uint8_t temp_L = 0;
	if (res == 0)		// If I2C device answer, get data
  bc:	81 11       	cpse	r24, r1
  be:	17 c0       	rjmp	.+46     	; 0xee <DHT_getTemperature+0x3c>
	{
		twi_write(2);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	0e 94 41 01 	call	0x282	; 0x282 <twi_write>
		twi_start((DHT12_ADDR << 1) + TWI_READ);
  c6:	89 eb       	ldi	r24, 0xB9	; 185
  c8:	0e 94 24 01 	call	0x248	; 0x248 <twi_start>
		temp_H = twi_read_ack();
  cc:	0e 94 4b 01 	call	0x296	; 0x296 <twi_read_ack>
  d0:	c8 2f       	mov	r28, r24
		temp_L = twi_read_nack();
  d2:	0e 94 55 01 	call	0x2aa	; 0x2aa <twi_read_nack>
  d6:	d8 2f       	mov	r29, r24
		twi_stop();
  d8:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_stop>
		uint8_t tmp = temp_L;
		temp_L &= 0x7F;	// Set MSB to '0'
  dc:	8d 2f       	mov	r24, r29
  de:	8f 77       	andi	r24, 0x7F	; 127
		if (temp_L > 4)	// Round up decimal place to nearest integer
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	08 f0       	brcs	.+2      	; 0xe6 <DHT_getTemperature+0x34>
			temp_H++;
  e4:	cf 5f       	subi	r28, 0xFF	; 255

		if ((tmp & 0x80) != 0)	// Negative temperature
  e6:	dd 23       	and	r29, r29
  e8:	1c f4       	brge	.+6      	; 0xf0 <DHT_getTemperature+0x3e>
			temp_H *= -1;
  ea:	c1 95       	neg	r28
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <DHT_getTemperature+0x3e>
#include "twi.h"

int DHT_getTemperature()
{
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
	uint8_t temp_H = 0;										// Init data variables
  ee:	c0 e0       	ldi	r28, 0x00	; 0
		if ((tmp & 0x80) != 0)	// Negative temperature
			temp_H *= -1;
	}
	
	return temp_H;	// Return result
}
  f0:	8c 2f       	mov	r24, r28
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <DHT_getHumidity>:

uint8_t DHT_getHumidity()
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
  fe:	88 eb       	ldi	r24, 0xB8	; 184
 100:	0e 94 24 01 	call	0x248	; 0x248 <twi_start>
	uint8_t hum_H = 0;
	uint8_t hum_L = 0;									// Initialize data variables
	if (res == 0)										// If I2C device answer, get data
 104:	81 11       	cpse	r24, r1
 106:	0e c0       	rjmp	.+28     	; 0x124 <DHT_getHumidity+0x2a>
	{
		twi_write(0);
 108:	0e 94 41 01 	call	0x282	; 0x282 <twi_write>
		twi_start((DHT12_ADDR << 1) + TWI_READ);
 10c:	89 eb       	ldi	r24, 0xB9	; 185
 10e:	0e 94 24 01 	call	0x248	; 0x248 <twi_start>
		hum_H = twi_read_ack();
 112:	0e 94 4b 01 	call	0x296	; 0x296 <twi_read_ack>
 116:	c8 2f       	mov	r28, r24
		hum_L = twi_read_nack();
 118:	0e 94 55 01 	call	0x2aa	; 0x2aa <twi_read_nack>
 11c:	d8 2f       	mov	r29, r24
		twi_stop();
 11e:	0e 94 5f 01 	call	0x2be	; 0x2be <twi_stop>
 122:	02 c0       	rjmp	.+4      	; 0x128 <DHT_getHumidity+0x2e>

uint8_t DHT_getHumidity()
{
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
	uint8_t hum_H = 0;
	uint8_t hum_L = 0;									// Initialize data variables
 124:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t DHT_getHumidity()
{
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
	uint8_t hum_H = 0;
 126:	c0 e0       	ldi	r28, 0x00	; 0
		twi_start((DHT12_ADDR << 1) + TWI_READ);
		hum_H = twi_read_ack();
		hum_L = twi_read_nack();
		twi_stop();
	}
	if (hum_L > 4)	// Round result to the nearest integer
 128:	d5 30       	cpi	r29, 0x05	; 5
 12a:	08 f0       	brcs	.+2      	; 0x12e <DHT_getHumidity+0x34>
		hum_H++;
 12c:	cf 5f       	subi	r28, 0xFF	; 255
	
	return hum_H;	// Return result
 12e:	8c 2f       	mov	r24, r28
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <GPIO_config_output>:
 */ 
#include "gpio.h"

void GPIO_config_output (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num);
 136:	fc 01       	movw	r30, r24
 138:	40 81       	ld	r20, Z
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <GPIO_config_output+0xe>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <GPIO_config_output+0xa>
 148:	24 2b       	or	r18, r20
 14a:	20 83       	st	Z, r18
 14c:	08 95       	ret

0000014e <main>:
volatile uint8_t humidity = 0;
volatile uint8_t soilMoisture = 0;

int main(void)
{
	relay_init();
 14e:	0e 94 00 01 	call	0x200	; 0x200 <relay_init>
	twi_init();
 152:	0e 94 15 01 	call	0x22a	; 0x22a <twi_init>
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 156:	87 e6       	ldi	r24, 0x67	; 103
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 bb 01 	call	0x376	; 0x376 <uart_init>
	
	uart_puts_P("\r\nGreenhouse M&C system started\r\n");
 15e:	88 e6       	ldi	r24, 0x68	; 104
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <uart_puts_p>
	
	TIM1_overflow_4s();
 166:	e1 e8       	ldi	r30, 0x81	; 129
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8d 7f       	andi	r24, 0xFD	; 253
 16e:	80 83       	st	Z, r24
 170:	80 81       	ld	r24, Z
 172:	85 60       	ori	r24, 0x05	; 5
 174:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 176:	ef e6       	ldi	r30, 0x6F	; 111
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	80 83       	st	Z, r24
	
	sei();
 180:	78 94       	sei

    while (1) 
    {
		if (minuteFlag == 1)	// 1 minute interval
 182:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <minuteFlag>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x34>
		{
			minuteFlag = 0;
 18a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <minuteFlag>
 18e:	f9 cf       	rjmp	.-14     	; 0x182 <main+0x34>

00000190 <__vector_13>:
		}
    }
}

ISR(TIMER1_OVF_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	static uint8_t cnt = 0;
	cnt++;
 1b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (cnt == 16)
 1bc:	80 31       	cpi	r24, 0x10	; 16
 1be:	29 f4       	brne	.+10     	; 0x1ca <__vector_13+0x3a>
	{
		cnt = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		minuteFlag = 1;
 1c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <minuteFlag>
	}
	temperature = DHT_getTemperature();
 1ca:	0e 94 59 00 	call	0xb2	; 0xb2 <DHT_getTemperature>
 1ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <temperature+0x1>
 1d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temperature>
	humidity = DHT_getHumidity();
 1d6:	0e 94 7d 00 	call	0xfa	; 0xfa <DHT_getHumidity>
 1da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <humidity>
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <relay_init>:
#include "gpio.h"
#include "relay.h"

void relay_init()
{	
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_1);
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	8a e2       	ldi	r24, 0x2A	; 42
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 9b 00 	call	0x136	; 0x136 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_2);
 20a:	66 e0       	ldi	r22, 0x06	; 6
 20c:	8a e2       	ldi	r24, 0x2A	; 42
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 9b 00 	call	0x136	; 0x136 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_3);
 214:	65 e0       	ldi	r22, 0x05	; 5
 216:	8a e2       	ldi	r24, 0x2A	; 42
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 9b 00 	call	0x136	; 0x136 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_4);
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	8a e2       	ldi	r24, 0x2A	; 42
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 9b 00 	call	0x136	; 0x136 <GPIO_config_output>
 228:	08 95       	ret

0000022a <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 22a:	87 b1       	in	r24, 0x07	; 7
 22c:	8f 7c       	andi	r24, 0xCF	; 207
 22e:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 230:	88 b1       	in	r24, 0x08	; 8
 232:	80 63       	ori	r24, 0x30	; 48
 234:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 236:	e9 eb       	ldi	r30, 0xB9	; 185
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	8c 7f       	andi	r24, 0xFC	; 252
 23e:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 240:	88 e9       	ldi	r24, 0x98	; 152
 242:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 246:	08 95       	ret

00000248 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 248:	94 ea       	ldi	r25, 0xA4	; 164
 24a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 24e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 252:	99 23       	and	r25, r25
 254:	e4 f7       	brge	.-8      	; 0x24e <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 256:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 25a:	84 e8       	ldi	r24, 0x84	; 132
 25c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 260:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 264:	88 23       	and	r24, r24
 266:	e4 f7       	brge	.-8      	; 0x260 <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 268:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 26c:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 26e:	88 31       	cpi	r24, 0x18	; 24
 270:	21 f0       	breq	.+8      	; 0x27a <twi_start+0x32>
 272:	80 34       	cpi	r24, 0x40	; 64
 274:	21 f4       	brne	.+8      	; 0x27e <twi_start+0x36>
    {
        return 0;   /* Slave device accessible */
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 27e:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 280:	08 95       	ret

00000282 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 282:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 286:	84 e8       	ldi	r24, 0x84	; 132
 288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 28c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 290:	88 23       	and	r24, r24
 292:	e4 f7       	brge	.-8      	; 0x28c <twi_write+0xa>
}
 294:	08 95       	ret

00000296 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 296:	84 ec       	ldi	r24, 0xC4	; 196
 298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 29c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a0:	88 23       	and	r24, r24
 2a2:	e4 f7       	brge	.-8      	; 0x29c <twi_read_ack+0x6>
    return (TWDR);
 2a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2a8:	08 95       	ret

000002aa <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 2aa:	84 e8       	ldi	r24, 0x84	; 132
 2ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 2b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b4:	88 23       	and	r24, r24
 2b6:	e4 f7       	brge	.-8      	; 0x2b0 <twi_read_nack+0x6>
    return (TWDR);
 2b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2bc:	08 95       	ret

000002be <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2be:	84 e9       	ldi	r24, 0x94	; 148
 2c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c4:	08 95       	ret

000002c6 <__vector_18>:
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
        uart_putc(*s++);
}/* uart_puts */
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	2f 93       	push	r18
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2de:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e2:	8c 71       	andi	r24, 0x1C	; 28
 2e4:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <UART_RxHead>
 2e8:	ef 5f       	subi	r30, 0xFF	; 255
 2ea:	ef 73       	andi	r30, 0x3F	; 63
 2ec:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <UART_RxTail>
 2f0:	e9 17       	cp	r30, r25
 2f2:	39 f0       	breq	.+14     	; 0x302 <__vector_18+0x3c>
 2f4:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <UART_RxHead>
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	e6 5f       	subi	r30, 0xF6	; 246
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	20 83       	st	Z, r18
 300:	01 c0       	rjmp	.+2      	; 0x304 <__vector_18+0x3e>
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <UART_LastRxError>
 308:	89 2b       	or	r24, r25
 30a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <UART_LastRxError>
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <__vector_19>:
 322:	1f 92       	push	r1
 324:	0f 92       	push	r0
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	0f 92       	push	r0
 32a:	11 24       	eor	r1, r1
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
 334:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <UART_TxHead>
 338:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <UART_TxTail>
 33c:	98 17       	cp	r25, r24
 33e:	69 f0       	breq	.+26     	; 0x35a <__vector_19+0x38>
 340:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <UART_TxTail>
 344:	ef 5f       	subi	r30, 0xFF	; 255
 346:	ef 73       	andi	r30, 0x3F	; 63
 348:	e0 93 08 01 	sts	0x0108, r30	; 0x800108 <UART_TxTail>
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e6 5b       	subi	r30, 0xB6	; 182
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	80 81       	ld	r24, Z
 354:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 358:	05 c0       	rjmp	.+10     	; 0x364 <__vector_19+0x42>
 35a:	e1 ec       	ldi	r30, 0xC1	; 193
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	8f 7d       	andi	r24, 0xDF	; 223
 362:	80 83       	st	Z, r24
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <uart_init>:
 376:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <UART_TxHead>
 37a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <UART_TxTail>
 37e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <UART_RxHead>
 382:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <UART_RxTail>
 386:	28 2f       	mov	r18, r24
 388:	39 2f       	mov	r19, r25
 38a:	33 23       	and	r19, r19
 38c:	1c f4       	brge	.+6      	; 0x394 <uart_init+0x1e>
 38e:	22 e0       	ldi	r18, 0x02	; 2
 390:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 394:	90 78       	andi	r25, 0x80	; 128
 396:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 39a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 39e:	88 e9       	ldi	r24, 0x98	; 152
 3a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3aa:	08 95       	ret

000003ac <uart_putc>:
 3ac:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <UART_TxHead>
 3b0:	2f 5f       	subi	r18, 0xFF	; 255
 3b2:	2f 73       	andi	r18, 0x3F	; 63
 3b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <UART_TxTail>
 3b8:	29 17       	cp	r18, r25
 3ba:	e1 f3       	breq	.-8      	; 0x3b4 <uart_putc+0x8>
 3bc:	e2 2f       	mov	r30, r18
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e6 5b       	subi	r30, 0xB6	; 182
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	80 83       	st	Z, r24
 3c6:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <UART_TxHead>
 3ca:	e1 ec       	ldi	r30, 0xC1	; 193
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	80 81       	ld	r24, Z
 3d0:	80 62       	ori	r24, 0x20	; 32
 3d2:	80 83       	st	Z, r24
 3d4:	08 95       	ret

000003d6 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <uart_puts_p+0xe>
        uart_putc(c);
 3de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 3e2:	fe 01       	movw	r30, r28
 3e4:	ef 01       	movw	r28, r30
 3e6:	21 96       	adiw	r28, 0x01	; 1
 3e8:	84 91       	lpm	r24, Z
 3ea:	81 11       	cpse	r24, r1
 3ec:	f8 cf       	rjmp	.-16     	; 0x3de <uart_puts_p+0x8>
        uart_putc(c);
}/* uart_puts_p */
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
