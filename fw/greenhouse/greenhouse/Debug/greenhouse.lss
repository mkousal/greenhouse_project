
greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000b56  00000bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  0080011a  0080011a  00000c04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002316  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e28  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001226  00000000  00000000  00003fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  000051e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078d  00000000  00000000  0000567c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012b3  00000000  00000000  00005e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  34:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__vector_13>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_16>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 bc 04 	jmp	0x978	; 0x978 <__vector_18>
  4c:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__vector_19>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  54:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_21>
  58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	0d 0a       	sbc	r0, r29
	...

0000006b <__c.2365>:
  6b:	0d 0a 00                                            ...

0000006e <__c.2363>:
  6e:	6c 69 67 68 74 00                                   light.

00000074 <__c.2361>:
  74:	64 61 72 6b 00                                      dark.

00000079 <__c.2359>:
  79:	25 20 20 4c 69 67 68 74 3a 20 00                    %  Light: .

00000084 <__c.2357>:
  84:	25 20 20 53 6f 69 6c 20 68 75 6d 69 64 69 74 79     %  Soil humidity
  94:	3a 20 00                                            : .

00000097 <__c.2355>:
  97:	43 20 20 41 69 72 20 68 75 6d 69 64 69 74 79 3a     C  Air humidity:
  a7:	20 00                                                .

000000a9 <__c.2352>:
  a9:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 00           Temperature: .

000000b7 <__c.2350>:
  b7:	0d 0a 47 72 65 65 6e 68 6f 75 73 65 20 73 79 73     ..Greenhouse sys
  c7:	74 65 6d 20 73 74 61 72 74 65 64 0d 0a 00           tem started...

000000d5 <__c.2345>:
  d5:	4c 3a 20 00                                         L: .

000000d9 <__c.2343>:
  d9:	53 3a 20 00                                         S: .

000000dd <__c.2341>:
  dd:	48 3a 20 00                                         H: .

000000e1 <__c.2339>:
  e1:	54 3a 20 00 00                                      T: ..

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d8 e0       	ldi	r29, 0x08	; 8
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	a0 e0       	ldi	r26, 0x00	; 0
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	e6 e5       	ldi	r30, 0x56	; 86
  fa:	fb e0       	ldi	r31, 0x0B	; 11
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x10>
  fe:	05 90       	lpm	r0, Z+
 100:	0d 92       	st	X+, r0
 102:	aa 31       	cpi	r26, 0x1A	; 26
 104:	b1 07       	cpc	r27, r17
 106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0xc>

00000108 <__do_clear_bss>:
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	aa e1       	ldi	r26, 0x1A	; 26
 10c:	b1 e0       	ldi	r27, 0x01	; 1
 10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
 110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
 112:	aa 3a       	cpi	r26, 0xAA	; 170
 114:	b2 07       	cpc	r27, r18
 116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
 118:	0e 94 8c 02 	call	0x518	; 0x518 <main>
 11c:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <_exit>

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <DHT_getTemperature>:
#include "dht.h"
#include "gpio.h"
#include "twi.h"

int DHT_getTemperature()
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
 128:	88 eb       	ldi	r24, 0xB8	; 184
 12a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <twi_start>
	uint8_t temp_H = 0;										// Init data variables
	uint8_t temp_L = 0;
	if (res == 0)		// If I2C device answer, get data
 12e:	81 11       	cpse	r24, r1
 130:	17 c0       	rjmp	.+46     	; 0x160 <DHT_getTemperature+0x3c>
	{
		twi_write(2);
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 9a 04 	call	0x934	; 0x934 <twi_write>
		twi_start((DHT12_ADDR << 1) + TWI_READ);
 138:	89 eb       	ldi	r24, 0xB9	; 185
 13a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <twi_start>
		temp_H = twi_read_ack();
 13e:	0e 94 a4 04 	call	0x948	; 0x948 <twi_read_ack>
 142:	c8 2f       	mov	r28, r24
		temp_L = twi_read_nack();
 144:	0e 94 ae 04 	call	0x95c	; 0x95c <twi_read_nack>
 148:	d8 2f       	mov	r29, r24
		twi_stop();
 14a:	0e 94 b8 04 	call	0x970	; 0x970 <twi_stop>
		uint8_t tmp = temp_L;
		temp_L &= 0x7F;	// Set MSB to '0'
 14e:	8d 2f       	mov	r24, r29
 150:	8f 77       	andi	r24, 0x7F	; 127
		if (temp_L > 4)	// Round up decimal place to nearest integer
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	08 f0       	brcs	.+2      	; 0x158 <DHT_getTemperature+0x34>
			temp_H++;
 156:	cf 5f       	subi	r28, 0xFF	; 255

		if ((tmp & 0x80) != 0)	// Negative temperature
 158:	dd 23       	and	r29, r29
 15a:	1c f4       	brge	.+6      	; 0x162 <DHT_getTemperature+0x3e>
			temp_H *= -1;
 15c:	c1 95       	neg	r28
 15e:	01 c0       	rjmp	.+2      	; 0x162 <DHT_getTemperature+0x3e>
#include "twi.h"

int DHT_getTemperature()
{
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
	uint8_t temp_H = 0;										// Init data variables
 160:	c0 e0       	ldi	r28, 0x00	; 0
		if ((tmp & 0x80) != 0)	// Negative temperature
			temp_H *= -1;
	}
	
	return temp_H;	// Return result
}
 162:	8c 2f       	mov	r24, r28
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <DHT_getHumidity>:

uint8_t DHT_getHumidity()
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
 170:	88 eb       	ldi	r24, 0xB8	; 184
 172:	0e 94 7d 04 	call	0x8fa	; 0x8fa <twi_start>
	uint8_t hum_H = 0;
	uint8_t hum_L = 0;									// Initialize data variables
	if (res == 0)										// If I2C device answer, get data
 176:	81 11       	cpse	r24, r1
 178:	0e c0       	rjmp	.+28     	; 0x196 <DHT_getHumidity+0x2a>
	{
		twi_write(0);
 17a:	0e 94 9a 04 	call	0x934	; 0x934 <twi_write>
		twi_start((DHT12_ADDR << 1) + TWI_READ);
 17e:	89 eb       	ldi	r24, 0xB9	; 185
 180:	0e 94 7d 04 	call	0x8fa	; 0x8fa <twi_start>
		hum_H = twi_read_ack();
 184:	0e 94 a4 04 	call	0x948	; 0x948 <twi_read_ack>
 188:	c8 2f       	mov	r28, r24
		hum_L = twi_read_nack();
 18a:	0e 94 ae 04 	call	0x95c	; 0x95c <twi_read_nack>
 18e:	d8 2f       	mov	r29, r24
		twi_stop();
 190:	0e 94 b8 04 	call	0x970	; 0x970 <twi_stop>
 194:	02 c0       	rjmp	.+4      	; 0x19a <DHT_getHumidity+0x2e>

uint8_t DHT_getHumidity()
{
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
	uint8_t hum_H = 0;
	uint8_t hum_L = 0;									// Initialize data variables
 196:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t DHT_getHumidity()
{
	uint8_t res = twi_start((DHT12_ADDR << 1) + TWI_WRITE);	// Start I2C communication
	uint8_t hum_H = 0;
 198:	c0 e0       	ldi	r28, 0x00	; 0
		twi_start((DHT12_ADDR << 1) + TWI_READ);
		hum_H = twi_read_ack();
		hum_L = twi_read_nack();
		twi_stop();
	}
	if (hum_L > 4)	// Round result to the nearest integer
 19a:	d5 30       	cpi	r29, 0x05	; 5
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <DHT_getHumidity+0x34>
		hum_H++;
 19e:	cf 5f       	subi	r28, 0xFF	; 255
	
	return hum_H;	// Return result
 1a0:	8c 2f       	mov	r24, r28
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <GPIO_config_output>:

void GPIO_config_input_pullup (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name &= ~(1<<pin_num);
	reg_name++;
	*reg_name |= (1<<pin_num);
 1a8:	fc 01       	movw	r30, r24
 1aa:	40 81       	ld	r20, Z
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <GPIO_config_output+0xe>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <GPIO_config_output+0xa>
 1ba:	24 2b       	or	r18, r20
 1bc:	20 83       	st	Z, r18
 1be:	08 95       	ret

000001c0 <GPIO_write_low>:
}

void GPIO_write_low (volatile uint8_t *reg_name, uint8_t pin_num)
{
 1c0:	fc 01       	movw	r30, r24
	*reg_name &= ~(1<<pin_num);
 1c2:	90 81       	ld	r25, Z
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GPIO_write_low+0xe>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <GPIO_write_low+0xa>
 1d2:	20 95       	com	r18
 1d4:	29 23       	and	r18, r25
 1d6:	20 83       	st	Z, r18
 1d8:	08 95       	ret

000001da <GPIO_write_high>:
}

void GPIO_write_high (volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num);
 1da:	fc 01       	movw	r30, r24
 1dc:	40 81       	ld	r20, Z
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <GPIO_write_high+0xe>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <GPIO_write_high+0xa>
 1ec:	24 2b       	or	r18, r20
 1ee:	20 83       	st	Z, r18
 1f0:	08 95       	ret

000001f2 <toggle_e>:
/*************************************************************************
*  Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1 << LCD_HOME);
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <toggle_e+0x8>
 1fe:	00 00       	nop
 200:	85 b1       	in	r24, 0x05	; 5
 202:	8d 7f       	andi	r24, 0xFD	; 253
 204:	85 b9       	out	0x05, r24	; 5
 206:	08 95       	ret

00000208 <lcd_write>:
 208:	cf 93       	push	r28
 20a:	c8 2f       	mov	r28, r24
 20c:	66 23       	and	r22, r22
 20e:	21 f0       	breq	.+8      	; 0x218 <lcd_write+0x10>
 210:	85 b1       	in	r24, 0x05	; 5
 212:	81 60       	ori	r24, 0x01	; 1
 214:	85 b9       	out	0x05, r24	; 5
 216:	03 c0       	rjmp	.+6      	; 0x21e <lcd_write+0x16>
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	8e 7f       	andi	r24, 0xFE	; 254
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	8a b1       	in	r24, 0x0a	; 10
 220:	80 61       	ori	r24, 0x10	; 16
 222:	8a b9       	out	0x0a, r24	; 10
 224:	8a b1       	in	r24, 0x0a	; 10
 226:	80 62       	ori	r24, 0x20	; 32
 228:	8a b9       	out	0x0a, r24	; 10
 22a:	8a b1       	in	r24, 0x0a	; 10
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	8a b9       	out	0x0a, r24	; 10
 230:	8a b1       	in	r24, 0x0a	; 10
 232:	80 68       	ori	r24, 0x80	; 128
 234:	8a b9       	out	0x0a, r24	; 10
 236:	8b b1       	in	r24, 0x0b	; 11
 238:	8f 77       	andi	r24, 0x7F	; 127
 23a:	8b b9       	out	0x0b, r24	; 11
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	8f 7b       	andi	r24, 0xBF	; 191
 240:	8b b9       	out	0x0b, r24	; 11
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	8b b9       	out	0x0b, r24	; 11
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	8f 7e       	andi	r24, 0xEF	; 239
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	cc 23       	and	r28, r28
 250:	1c f4       	brge	.+6      	; 0x258 <lcd_write+0x50>
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	80 68       	ori	r24, 0x80	; 128
 256:	8b b9       	out	0x0b, r24	; 11
 258:	c6 ff       	sbrs	r28, 6
 25a:	03 c0       	rjmp	.+6      	; 0x262 <lcd_write+0x5a>
 25c:	8b b1       	in	r24, 0x0b	; 11
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	8b b9       	out	0x0b, r24	; 11
 262:	c5 ff       	sbrs	r28, 5
 264:	03 c0       	rjmp	.+6      	; 0x26c <lcd_write+0x64>
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	8b b9       	out	0x0b, r24	; 11
 26c:	c4 ff       	sbrs	r28, 4
 26e:	03 c0       	rjmp	.+6      	; 0x276 <lcd_write+0x6e>
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	80 61       	ori	r24, 0x10	; 16
 274:	8b b9       	out	0x0b, r24	; 11
 276:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <toggle_e>
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	8f 77       	andi	r24, 0x7F	; 127
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	8f 7b       	andi	r24, 0xBF	; 191
 284:	8b b9       	out	0x0b, r24	; 11
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	8f 7d       	andi	r24, 0xDF	; 223
 28a:	8b b9       	out	0x0b, r24	; 11
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	8f 7e       	andi	r24, 0xEF	; 239
 290:	8b b9       	out	0x0b, r24	; 11
 292:	c3 ff       	sbrs	r28, 3
 294:	03 c0       	rjmp	.+6      	; 0x29c <lcd_write+0x94>
 296:	8b b1       	in	r24, 0x0b	; 11
 298:	80 68       	ori	r24, 0x80	; 128
 29a:	8b b9       	out	0x0b, r24	; 11
 29c:	c2 ff       	sbrs	r28, 2
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <lcd_write+0x9e>
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	80 64       	ori	r24, 0x40	; 64
 2a4:	8b b9       	out	0x0b, r24	; 11
 2a6:	c1 ff       	sbrs	r28, 1
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <lcd_write+0xa8>
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	8b b9       	out	0x0b, r24	; 11
 2b0:	c0 ff       	sbrs	r28, 0
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <lcd_write+0xb2>
 2b4:	8b b1       	in	r24, 0x0b	; 11
 2b6:	80 61       	ori	r24, 0x10	; 16
 2b8:	8b b9       	out	0x0b, r24	; 11
 2ba:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <toggle_e>
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	80 61       	ori	r24, 0x10	; 16
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 62       	ori	r24, 0x20	; 32
 2c8:	8b b9       	out	0x0b, r24	; 11
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	80 64       	ori	r24, 0x40	; 64
 2ce:	8b b9       	out	0x0b, r24	; 11
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	8b b9       	out	0x0b, r24	; 11
 2d6:	87 eb       	ldi	r24, 0xB7	; 183
 2d8:	9b e0       	ldi	r25, 0x0B	; 11
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_write+0xd2>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_write+0xd8>
 2e0:	00 00       	nop
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <lcd_command>:
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write>
 2ec:	08 95       	ret

000002ee <lcd_gotoxy>:
 2ee:	61 11       	cpse	r22, r1
 2f0:	04 c0       	rjmp	.+8      	; 0x2fa <lcd_gotoxy+0xc>
 2f2:	80 58       	subi	r24, 0x80	; 128
 2f4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
 2f8:	08 95       	ret
 2fa:	80 54       	subi	r24, 0x40	; 64
 2fc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
 300:	08 95       	ret

00000302 <lcd_clrscr>:
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
 308:	08 95       	ret

0000030a <lcd_putc>:
     *      }
     #endif
     *      lcd_waitbusy();
     #endif
     */
    lcd_write(c, 1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	0e 94 04 01 	call	0x208	; 0x208 <lcd_write>
 310:	08 95       	ret

00000312 <lcd_puts>:
*  Input:    string to be displayed
*  Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) )
 318:	03 c0       	rjmp	.+6      	; 0x320 <lcd_puts+0xe>
    {
        lcd_putc(c);
 31a:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) )
 31e:	fe 01       	movw	r30, r28
 320:	ef 01       	movw	r28, r30
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	80 81       	ld	r24, Z
 326:	81 11       	cpse	r24, r1
 328:	f8 cf       	rjmp	.-16     	; 0x31a <lcd_puts+0x8>
    {
        lcd_putc(c);
    }
}/* lcd_puts */
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <lcd_puts_p>:
*  Input:     string from program memory be be displayed
*  Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 336:	03 c0       	rjmp	.+6      	; 0x33e <lcd_puts_p+0xe>
    {
        lcd_putc(c);
 338:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 33c:	fe 01       	movw	r30, r28
 33e:	ef 01       	movw	r28, r30
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	84 91       	lpm	r24, Z
 344:	81 11       	cpse	r24, r1
 346:	f8 cf       	rjmp	.-16     	; 0x338 <lcd_puts_p+0x8>
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 34e:	cf 93       	push	r28
 350:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 352:	84 b1       	in	r24, 0x04	; 4
 354:	81 60       	ori	r24, 0x01	; 1
 356:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 358:	8a b1       	in	r24, 0x0a	; 10
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 35e:	84 b1       	in	r24, 0x04	; 4
 360:	82 60       	ori	r24, 0x02	; 2
 362:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 364:	8a b1       	in	r24, 0x0a	; 10
 366:	80 61       	ori	r24, 0x10	; 16
 368:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 36a:	8a b1       	in	r24, 0x0a	; 10
 36c:	80 62       	ori	r24, 0x20	; 32
 36e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 370:	8a b1       	in	r24, 0x0a	; 10
 372:	80 64       	ori	r24, 0x40	; 64
 374:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 376:	8a b1       	in	r24, 0x0a	; 10
 378:	80 68       	ori	r24, 0x80	; 128
 37a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	99 ef       	ldi	r25, 0xF9	; 249
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x32>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init+0x38>
 386:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 388:	8b b1       	in	r24, 0x0b	; 11
 38a:	80 62       	ori	r24, 0x20	; 32
 38c:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 38e:	8b b1       	in	r24, 0x0b	; 11
 390:	80 61       	ori	r24, 0x10	; 16
 392:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 394:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <toggle_e>
 398:	8f e1       	ldi	r24, 0x1F	; 31
 39a:	9e e4       	ldi	r25, 0x4E	; 78
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x4e>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_init+0x54>
 3a2:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 3a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <toggle_e>
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_init+0x5e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <lcd_init+0x64>
 3b2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 3b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <toggle_e>
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <lcd_init+0x6e>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <lcd_init+0x74>
 3c2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 3c4:	8b b1       	in	r24, 0x0b	; 11
 3c6:	8f 7e       	andi	r24, 0xEF	; 239
 3c8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 3ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <toggle_e>
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <lcd_init+0x84>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <lcd_init+0x8a>
 3d8:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 3da:	88 e2       	ldi	r24, 0x28	; 40
 3dc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 3e6:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 3f0:	8c 2f       	mov	r24, r28
 3f2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <lcd_command>
}/* lcd_init */
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <map>:
volatile uint8_t humidity = 0;
volatile uint16_t soilMoisture = 0;
volatile uint16_t lightIntensity = 0;

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 3fe:	fc 01       	movw	r30, r24
 400:	e6 1b       	sub	r30, r22
 402:	f7 0b       	sbc	r31, r23
 404:	02 1b       	sub	r16, r18
 406:	13 0b       	sbc	r17, r19
 408:	e0 9f       	mul	r30, r16
 40a:	c0 01       	movw	r24, r0
 40c:	e1 9f       	mul	r30, r17
 40e:	90 0d       	add	r25, r0
 410:	f0 9f       	mul	r31, r16
 412:	90 0d       	add	r25, r0
 414:	11 24       	eor	r1, r1
 416:	fa 01       	movw	r30, r20
 418:	e6 1b       	sub	r30, r22
 41a:	f7 0b       	sbc	r31, r23
 41c:	bf 01       	movw	r22, r30
 41e:	0e 94 60 05 	call	0xac0	; 0xac0 <__udivmodhi4>
}
 422:	c9 01       	movw	r24, r18
 424:	86 0f       	add	r24, r22
 426:	97 1f       	adc	r25, r23
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <lcdUpdate>:

void lcdUpdate(int temperature, uint16_t soil, uint16_t light, uint16_t hum)
{
 42e:	af 92       	push	r10
 430:	bf 92       	push	r11
 432:	cf 92       	push	r12
 434:	df 92       	push	r13
 436:	ef 92       	push	r14
 438:	ff 92       	push	r15
 43a:	0f 93       	push	r16
 43c:	1f 93       	push	r17
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <lcdUpdate+0x16>
 444:	00 d0       	rcall	.+0      	; 0x446 <lcdUpdate+0x18>
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	5c 01       	movw	r10, r24
 44c:	7b 01       	movw	r14, r22
 44e:	8a 01       	movw	r16, r20
 450:	69 01       	movw	r12, r18
	char tmp_str[4] = "    ";
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	90 e2       	ldi	r25, 0x20	; 32
 456:	9a 83       	std	Y+2, r25	; 0x02
 458:	89 83       	std	Y+1, r24	; 0x01
 45a:	9c 83       	std	Y+4, r25	; 0x04
 45c:	8b 83       	std	Y+3, r24	; 0x03
	lcd_clrscr();
 45e:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
	lcd_gotoxy(0,0);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_puts_P("T: ");
 46a:	81 ee       	ldi	r24, 0xE1	; 225
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts_p>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 472:	4a e0       	ldi	r20, 0x0A	; 10
 474:	be 01       	movw	r22, r28
 476:	6f 5f       	subi	r22, 0xFF	; 255
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	c5 01       	movw	r24, r10
 47c:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
	itoa(temperature, tmp_str, 10);
	lcd_puts(tmp_str);
 480:	ce 01       	movw	r24, r28
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	0e 94 89 01 	call	0x312	; 0x312 <lcd_puts>
	lcd_gotoxy(0,1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_puts_P("H: ");
 490:	8d ed       	ldi	r24, 0xDD	; 221
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts_p>
 498:	4a e0       	ldi	r20, 0x0A	; 10
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	c6 01       	movw	r24, r12
 4a2:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
	itoa(hum, tmp_str, 10);
	lcd_puts(tmp_str);
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	0e 94 89 01 	call	0x312	; 0x312 <lcd_puts>
	lcd_gotoxy(8, 0);
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	88 e0       	ldi	r24, 0x08	; 8
 4b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_puts_P("S: ");
 4b6:	89 ed       	ldi	r24, 0xD9	; 217
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts_p>
 4be:	4a e0       	ldi	r20, 0x0A	; 10
 4c0:	be 01       	movw	r22, r28
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	c7 01       	movw	r24, r14
 4c8:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
	itoa(soil, tmp_str, 10);
	lcd_puts(tmp_str);
 4cc:	ce 01       	movw	r24, r28
 4ce:	01 96       	adiw	r24, 0x01	; 1
 4d0:	0e 94 89 01 	call	0x312	; 0x312 <lcd_puts>
	lcd_gotoxy(8, 1);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_puts_P("L: ");
 4dc:	85 ed       	ldi	r24, 0xD5	; 213
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 98 01 	call	0x330	; 0x330 <lcd_puts_p>
 4e4:	4a e0       	ldi	r20, 0x0A	; 10
 4e6:	be 01       	movw	r22, r28
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	c8 01       	movw	r24, r16
 4ee:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
	itoa(light, tmp_str, 10);
	lcd_puts(tmp_str);
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	0e 94 89 01 	call	0x312	; 0x312 <lcd_puts>
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	1f 91       	pop	r17
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	08 95       	ret

00000518 <main>:

int main(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <main+0x6>
 51e:	00 d0       	rcall	.+0      	; 0x520 <main+0x8>
 520:	1f 92       	push	r1
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
	relay_init();
 526:	0e 94 4d 04 	call	0x89a	; 0x89a <relay_init>
	twi_init();
 52a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <twi_init>
	uart_init(UART_BAUD_SELECT(9600, F_CPU));
 52e:	87 e6       	ldi	r24, 0x67	; 103
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 14 05 	call	0xa28	; 0xa28 <uart_init>
	lcd_init(LCD_DISP_ON);
 536:	8c e0       	ldi	r24, 0x0C	; 12
 538:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_init>
	
	uart_puts_P("\r\nGreenhouse system started\r\n");	// Print start message to UART
 53c:	87 eb       	ldi	r24, 0xB7	; 183
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
	lcd_gotoxy(5,0);									// Print starting message to LCD
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	85 e0       	ldi	r24, 0x05	; 5
 548:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_puts("Greenhouse");
 54c:	86 e0       	ldi	r24, 0x06	; 6
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 89 01 	call	0x312	; 0x312 <lcd_puts>
	lcd_gotoxy(4,1);
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	84 e0       	ldi	r24, 0x04	; 4
 558:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_gotoxy>
	lcd_puts("project");
 55c:	81 e1       	ldi	r24, 0x11	; 17
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	0e 94 89 01 	call	0x312	; 0x312 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 564:	2f ef       	ldi	r18, 0xFF	; 255
 566:	83 ed       	ldi	r24, 0xD3	; 211
 568:	90 e3       	ldi	r25, 0x30	; 48
 56a:	21 50       	subi	r18, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <main+0x52>
 572:	00 c0       	rjmp	.+0      	; 0x574 <main+0x5c>
 574:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 576:	0e 94 81 01 	call	0x302	; 0x302 <lcd_clrscr>
	
	ADC_set_reference_AVCC();
 57a:	ec e7       	ldi	r30, 0x7C	; 124
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	8f 77       	andi	r24, 0x7F	; 127
 582:	80 83       	st	Z, r24
 584:	80 81       	ld	r24, Z
 586:	80 64       	ori	r24, 0x40	; 64
 588:	80 83       	st	Z, r24
	ADC_enable();
 58a:	ea e7       	ldi	r30, 0x7A	; 122
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	80 68       	ori	r24, 0x80	; 128
 592:	80 83       	st	Z, r24
	ADC_enable_conversion_complete_interrupt();
 594:	80 81       	ld	r24, Z
 596:	88 60       	ori	r24, 0x08	; 8
 598:	80 83       	st	Z, r24
	ADC_set_prescaler_128();
 59a:	80 81       	ld	r24, Z
 59c:	87 60       	ori	r24, 0x07	; 7
 59e:	80 83       	st	Z, r24
	
	TIM1_overflow_4s();
 5a0:	e1 e8       	ldi	r30, 0x81	; 129
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	8d 7f       	andi	r24, 0xFD	; 253
 5a8:	80 83       	st	Z, r24
 5aa:	80 81       	ld	r24, Z
 5ac:	85 60       	ori	r24, 0x05	; 5
 5ae:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 5b0:	ef e6       	ldi	r30, 0x6F	; 111
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	81 60       	ori	r24, 0x01	; 1
 5b8:	80 83       	st	Z, r24
	TIM0_overflow_16ms();
 5ba:	85 b5       	in	r24, 0x25	; 37
 5bc:	8d 7f       	andi	r24, 0xFD	; 253
 5be:	85 bd       	out	0x25, r24	; 37
 5c0:	85 b5       	in	r24, 0x25	; 37
 5c2:	85 60       	ori	r24, 0x05	; 5
 5c4:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 5c6:	ee e6       	ldi	r30, 0x6E	; 110
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	80 83       	st	Z, r24
	sei();
 5d0:	78 94       	sei

    while (1) 
    {
		if (minuteFlag == 1)	// 1 minute interval
 5d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <minuteFlag>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0xba>
		{
			minuteFlag = 0;
 5da:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <minuteFlag>
			temperature = DHT_getTemperature();
 5de:	0e 94 92 00 	call	0x124	; 0x124 <DHT_getTemperature>
 5e2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <temperature+0x1>
 5e6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <temperature>
			humidity = DHT_getHumidity();
 5ea:	0e 94 b6 00 	call	0x16c	; 0x16c <DHT_getHumidity>
 5ee:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <humidity>
			soilMoisture = map(1023 - soilMoisture, 1023 - 940, 1023 - 730, 0, 100);
 5f2:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <soilMoisture>
 5f6:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <soilMoisture+0x1>
 5fa:	04 e6       	ldi	r16, 0x64	; 100
 5fc:	10 e0       	ldi	r17, 0x00	; 0
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	45 e2       	ldi	r20, 0x25	; 37
 604:	51 e0       	ldi	r21, 0x01	; 1
 606:	63 e5       	ldi	r22, 0x53	; 83
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	93 e0       	ldi	r25, 0x03	; 3
 60e:	8e 1b       	sub	r24, r30
 610:	9f 0b       	sbc	r25, r31
 612:	0e 94 fd 01 	call	0x3fa	; 0x3fa <map>
 616:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <soilMoisture+0x1>
 61a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <soilMoisture>
			uart_puts_P("Temperature: ");
 61e:	89 ea       	ldi	r24, 0xA9	; 169
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
		
			char tmp_str[5] = "     ";
 626:	85 e0       	ldi	r24, 0x05	; 5
 628:	e0 e0       	ldi	r30, 0x00	; 0
 62a:	f1 e0       	ldi	r31, 0x01	; 1
 62c:	de 01       	movw	r26, r28
 62e:	11 96       	adiw	r26, 0x01	; 1
 630:	01 90       	ld	r0, Z+
 632:	0d 92       	st	X+, r0
 634:	8a 95       	dec	r24
 636:	e1 f7       	brne	.-8      	; 0x630 <main+0x118>
			itoa(temperature, tmp_str, 10);
 638:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
 63c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
 640:	4a e0       	ldi	r20, 0x0A	; 10
 642:	be 01       	movw	r22, r28
 644:	6f 5f       	subi	r22, 0xFF	; 255
 646:	7f 4f       	sbci	r23, 0xFF	; 255
 648:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			uart_puts(tmp_str);
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	0e 94 44 05 	call	0xa88	; 0xa88 <uart_puts>
			uart_putc(248);		// Degree sign
 654:	88 ef       	ldi	r24, 0xF8	; 248
 656:	0e 94 2f 05 	call	0xa5e	; 0xa5e <uart_putc>
			uart_puts_P("C  Air humidity: ");
 65a:	87 e9       	ldi	r24, 0x97	; 151
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
			itoa(humidity, tmp_str, 10);
 662:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <humidity>
 666:	4a e0       	ldi	r20, 0x0A	; 10
 668:	be 01       	movw	r22, r28
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			uart_puts(tmp_str);
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	0e 94 44 05 	call	0xa88	; 0xa88 <uart_puts>
			uart_puts_P("%  Soil humidity: ");
 67c:	84 e8       	ldi	r24, 0x84	; 132
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
			itoa(soilMoisture, tmp_str, 10);
 684:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <soilMoisture>
 688:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <soilMoisture+0x1>
 68c:	4a e0       	ldi	r20, 0x0A	; 10
 68e:	be 01       	movw	r22, r28
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			uart_puts(tmp_str);
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	0e 94 44 05 	call	0xa88	; 0xa88 <uart_puts>
			uart_puts_P("%  Light: ");
 6a0:	89 e7       	ldi	r24, 0x79	; 121
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
			if (lightIntensity > 600)
 6a8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <lightIntensity>
 6ac:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <lightIntensity+0x1>
 6b0:	89 35       	cpi	r24, 0x59	; 89
 6b2:	92 40       	sbci	r25, 0x02	; 2
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <main+0x1a8>
				uart_puts_P("dark");
 6b6:	84 e7       	ldi	r24, 0x74	; 116
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
 6be:	04 c0       	rjmp	.+8      	; 0x6c8 <main+0x1b0>
			else
				uart_puts_P("light");
 6c0:	8e e6       	ldi	r24, 0x6E	; 110
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
			itoa(lightIntensity, tmp_str, 10);
 6c8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <lightIntensity>
 6cc:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <lightIntensity+0x1>
 6d0:	4a e0       	ldi	r20, 0x0A	; 10
 6d2:	be 01       	movw	r22, r28
 6d4:	6f 5f       	subi	r22, 0xFF	; 255
 6d6:	7f 4f       	sbci	r23, 0xFF	; 255
 6d8:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			uart_puts(tmp_str);
 6dc:	ce 01       	movw	r24, r28
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	0e 94 44 05 	call	0xa88	; 0xa88 <uart_puts>
			uart_puts_P("\r\n");
 6e4:	8b e6       	ldi	r24, 0x6B	; 107
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
			
			if (lightIntensity > 600)	// Light intensity -> dark
 6ec:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <lightIntensity>
 6f0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <lightIntensity+0x1>
 6f4:	89 35       	cpi	r24, 0x59	; 89
 6f6:	92 40       	sbci	r25, 0x02	; 2
 6f8:	20 f0       	brcs	.+8      	; 0x702 <main+0x1ea>
				relay_on(RELAY_3);		// Turn on light (relay 3)
 6fa:	84 e0       	ldi	r24, 0x04	; 4
 6fc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <relay_on>
 700:	03 c0       	rjmp	.+6      	; 0x708 <main+0x1f0>
			else						// Light intensity -> bright
				relay_off(RELAY_3);		// turn off light
 702:	84 e0       	ldi	r24, 0x04	; 4
 704:	0e 94 68 04 	call	0x8d0	; 0x8d0 <relay_off>
				
			
			itoa(soilMoisture, tmp_str, 10);
 708:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <soilMoisture>
 70c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <soilMoisture+0x1>
 710:	4a e0       	ldi	r20, 0x0A	; 10
 712:	be 01       	movw	r22, r28
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	0e 94 74 05 	call	0xae8	; 0xae8 <__itoa_ncheck>
			uart_puts(tmp_str);
 71c:	ce 01       	movw	r24, r28
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	0e 94 44 05 	call	0xa88	; 0xa88 <uart_puts>
			uart_puts_P("\r\n");
 724:	88 e6       	ldi	r24, 0x68	; 104
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 51 05 	call	0xaa2	; 0xaa2 <uart_puts_p>
			
			if (soilMoisture < 50)
 72c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <soilMoisture>
 730:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <soilMoisture+0x1>
 734:	c2 97       	sbiw	r24, 0x32	; 50
 736:	20 f4       	brcc	.+8      	; 0x740 <main+0x228>
				relay_on(RELAY_4);
 738:	85 e0       	ldi	r24, 0x05	; 5
 73a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <relay_on>
 73e:	03 c0       	rjmp	.+6      	; 0x746 <main+0x22e>
			else
				relay_off(RELAY_4);
 740:	85 e0       	ldi	r24, 0x05	; 5
 742:	0e 94 68 04 	call	0x8d0	; 0x8d0 <relay_off>
				
			if (temperature > 25 || humidity > 30)
 746:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
 74a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
 74e:	4a 97       	sbiw	r24, 0x1a	; 26
 750:	24 f4       	brge	.+8      	; 0x75a <main+0x242>
 752:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <humidity>
 756:	8f 31       	cpi	r24, 0x1F	; 31
 758:	20 f0       	brcs	.+8      	; 0x762 <main+0x24a>
				relay_on(RELAY_1);
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <relay_on>
 760:	03 c0       	rjmp	.+6      	; 0x768 <main+0x250>
			else
				relay_off(RELAY_1);
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	0e 94 68 04 	call	0x8d0	; 0x8d0 <relay_off>
				
			if(temperature < 25)
 768:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
 76c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
 770:	49 97       	sbiw	r24, 0x19	; 25
 772:	24 f4       	brge	.+8      	; 0x77c <main+0x264>
				relay_on(RELAY_2);
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	0e 94 62 04 	call	0x8c4	; 0x8c4 <relay_on>
 77a:	03 c0       	rjmp	.+6      	; 0x782 <main+0x26a>
			else
				relay_off(RELAY_2);
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <relay_off>
				
				
			lcdUpdate(temperature, soilMoisture, lightIntensity, humidity);
 782:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <humidity>
 786:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <lightIntensity>
 78a:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <lightIntensity+0x1>
 78e:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <soilMoisture>
 792:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <soilMoisture+0x1>
 796:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <temperature>
 79a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <temperature+0x1>
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	0e 94 17 02 	call	0x42e	; 0x42e <lcdUpdate>
 7a4:	16 cf       	rjmp	.-468    	; 0x5d2 <main+0xba>

000007a6 <__vector_13>:
		}
    }
}

ISR(TIMER1_OVF_vect)
{
 7a6:	1f 92       	push	r1
 7a8:	0f 92       	push	r0
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	0f 92       	push	r0
 7ae:	11 24       	eor	r1, r1
 7b0:	8f 93       	push	r24
	static uint8_t cnt = 0;
	cnt++;
 7b2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <cnt.2375>
 7b6:	8f 5f       	subi	r24, 0xFF	; 255
 7b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <cnt.2375>
	if (cnt == 2)	// 16 for 1 minute interval
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	29 f4       	brne	.+10     	; 0x7ca <__vector_13+0x24>
	{
		cnt = 1;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <cnt.2375>
		minuteFlag = 1;
 7c6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <minuteFlag>
	}
}
 7ca:	8f 91       	pop	r24
 7cc:	0f 90       	pop	r0
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	0f 90       	pop	r0
 7d2:	1f 90       	pop	r1
 7d4:	18 95       	reti

000007d6 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 7d6:	1f 92       	push	r1
 7d8:	0f 92       	push	r0
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	0f 92       	push	r0
 7de:	11 24       	eor	r1, r1
 7e0:	8f 93       	push	r24
 7e2:	ef 93       	push	r30
 7e4:	ff 93       	push	r31
	static uint8_t cnt = 0;
	static uint8_t i = 0;
	cnt++;
 7e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cnt.2381>
 7ea:	8f 5f       	subi	r24, 0xFF	; 255
 7ec:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cnt.2381>
	if(cnt == 10)	// ~160 ms
 7f0:	8a 30       	cpi	r24, 0x0A	; 10
 7f2:	49 f5       	brne	.+82     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
	{
		cnt = 0;
 7f4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <cnt.2381>
		switch (i)
 7f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 7fc:	88 23       	and	r24, r24
 7fe:	19 f0       	breq	.+6      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 800:	81 30       	cpi	r24, 0x01	; 1
 802:	91 f0       	breq	.+36     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 804:	20 c0       	rjmp	.+64     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		{
			case 0:
				ADC_select_channel_3();	// Soil moisture sensor
 806:	ec e7       	ldi	r30, 0x7C	; 124
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	83 7f       	andi	r24, 0xF3	; 243
 80e:	80 83       	st	Z, r24
 810:	80 81       	ld	r24, Z
 812:	83 60       	ori	r24, 0x03	; 3
 814:	80 83       	st	Z, r24
				ADC_start();
 816:	ea e7       	ldi	r30, 0x7A	; 122
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	80 64       	ori	r24, 0x40	; 64
 81e:	80 83       	st	Z, r24
				i = 1;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
				break;
 826:	0f c0       	rjmp	.+30     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			case 1:
				ADC_select_channel_2();	// Light intensity sensor
 828:	ec e7       	ldi	r30, 0x7C	; 124
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	82 7f       	andi	r24, 0xF2	; 242
 830:	80 83       	st	Z, r24
 832:	80 81       	ld	r24, Z
 834:	82 60       	ori	r24, 0x02	; 2
 836:	80 83       	st	Z, r24
				ADC_start();
 838:	ea e7       	ldi	r30, 0x7A	; 122
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	80 64       	ori	r24, 0x40	; 64
 840:	80 83       	st	Z, r24
				i = 0;
 842:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
				break;
		}
	}
	
}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	8f 91       	pop	r24
 84c:	0f 90       	pop	r0
 84e:	0f be       	out	0x3f, r0	; 63
 850:	0f 90       	pop	r0
 852:	1f 90       	pop	r1
 854:	18 95       	reti

00000856 <__vector_21>:

ISR(ADC_vect)
{
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	2f 93       	push	r18
 862:	3f 93       	push	r19
 864:	8f 93       	push	r24
	uint16_t adc = ADC;
 866:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 86a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	if ((ADMUX & 0x03) == 3)	// Soil moisture sensor
 86e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 872:	83 70       	andi	r24, 0x03	; 3
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	29 f4       	brne	.+10     	; 0x882 <__vector_21+0x2c>
		soilMoisture = adc;
 878:	30 93 20 01 	sts	0x0120, r19	; 0x800120 <soilMoisture+0x1>
 87c:	20 93 1f 01 	sts	0x011F, r18	; 0x80011f <soilMoisture>
 880:	04 c0       	rjmp	.+8      	; 0x88a <__vector_21+0x34>
	else	// Light intensity sensor
		lightIntensity = adc;
 882:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <lightIntensity+0x1>
 886:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <lightIntensity>
 88a:	8f 91       	pop	r24
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <relay_init>:
#include "gpio.h"
#include "relay.h"

void relay_init()
{	
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_1);
 89a:	62 e0       	ldi	r22, 0x02	; 2
 89c:	84 e2       	ldi	r24, 0x24	; 36
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_2);
 8a4:	63 e0       	ldi	r22, 0x03	; 3
 8a6:	84 e2       	ldi	r24, 0x24	; 36
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_3);
 8ae:	64 e0       	ldi	r22, 0x04	; 4
 8b0:	84 e2       	ldi	r24, 0x24	; 36
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <GPIO_config_output>
	GPIO_config_output(&RELAY_DDR_PORT, RELAY_4);
 8b8:	65 e0       	ldi	r22, 0x05	; 5
 8ba:	84 e2       	ldi	r24, 0x24	; 36
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <GPIO_config_output>
 8c2:	08 95       	ret

000008c4 <relay_on>:
}

void relay_on(uint8_t relay)
{
	GPIO_write_high(&RELAY_PORT, relay);
 8c4:	68 2f       	mov	r22, r24
 8c6:	85 e2       	ldi	r24, 0x25	; 37
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 ed 00 	call	0x1da	; 0x1da <GPIO_write_high>
 8ce:	08 95       	ret

000008d0 <relay_off>:
}

void relay_off(uint8_t relay)
{
	GPIO_write_low(&RELAY_PORT, relay);	
 8d0:	68 2f       	mov	r22, r24
 8d2:	85 e2       	ldi	r24, 0x25	; 37
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <GPIO_write_low>
 8da:	08 95       	ret

000008dc <twi_init>:
 * Returns:  none
 **********************************************************************/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 8dc:	87 b1       	in	r24, 0x07	; 7
 8de:	8f 7c       	andi	r24, 0xCF	; 207
 8e0:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 8e2:	88 b1       	in	r24, 0x08	; 8
 8e4:	80 63       	ori	r24, 0x30	; 48
 8e6:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 8e8:	e9 eb       	ldi	r30, 0xB9	; 185
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	8c 7f       	andi	r24, 0xFC	; 252
 8f0:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 8f2:	88 e9       	ldi	r24, 0x98	; 152
 8f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 8f8:	08 95       	ret

000008fa <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 8fa:	94 ea       	ldi	r25, 0xA4	; 164
 8fc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 900:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 904:	99 23       	and	r25, r25
 906:	e4 f7       	brge	.-8      	; 0x900 <__stack+0x1>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 908:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 90c:	84 e8       	ldi	r24, 0x84	; 132
 90e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & _BV(TWINT)) == 0);
 912:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 916:	88 23       	and	r24, r24
 918:	e4 f7       	brge	.-8      	; 0x912 <__stack+0x13>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 91a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 91e:	88 7f       	andi	r24, 0xF8	; 248

    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
    if (twi_response == 0x18 || twi_response == 0x40)
 920:	88 31       	cpi	r24, 0x18	; 24
 922:	21 f0       	breq	.+8      	; 0x92c <__stack+0x2d>
 924:	80 34       	cpi	r24, 0x40	; 64
 926:	21 f4       	brne	.+8      	; 0x930 <__stack+0x31>
    {
        return 0;   /* Slave device accessible */
 928:	80 e0       	ldi	r24, 0x00	; 0
 92a:	08 95       	ret
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	08 95       	ret
    }
    else
    {
        return 1;   /* Failed to access slave device */
 930:	81 e0       	ldi	r24, 0x01	; 1
    }
}
 932:	08 95       	ret

00000934 <twi_write>:
 * Input:    data Byte to be transmitted
 * Returns:  none
 **********************************************************************/
void twi_write(uint8_t data)
{
    TWDR = data;
 934:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 938:	84 e8       	ldi	r24, 0x84	; 132
 93a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 93e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 942:	88 23       	and	r24, r24
 944:	e4 f7       	brge	.-8      	; 0x93e <twi_write+0xa>
}
 946:	08 95       	ret

00000948 <twi_read_ack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by ACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_ack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 948:	84 ec       	ldi	r24, 0xC4	; 196
 94a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 94e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 952:	88 23       	and	r24, r24
 954:	e4 f7       	brge	.-8      	; 0x94e <twi_read_ack+0x6>
    return (TWDR);
 956:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 95a:	08 95       	ret

0000095c <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 95c:	84 e8       	ldi	r24, 0x84	; 132
 95e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while ((TWCR & _BV(TWINT)) == 0);
 962:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 966:	88 23       	and	r24, r24
 968:	e4 f7       	brge	.-8      	; 0x962 <twi_read_nack+0x6>
    return (TWDR);
 96a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 96e:	08 95       	ret

00000970 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 970:	84 e9       	ldi	r24, 0x94	; 148
 972:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 976:	08 95       	ret

00000978 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 978:	1f 92       	push	r1
 97a:	0f 92       	push	r0
 97c:	0f b6       	in	r0, 0x3f	; 63
 97e:	0f 92       	push	r0
 980:	11 24       	eor	r1, r1
 982:	2f 93       	push	r18
 984:	8f 93       	push	r24
 986:	9f 93       	push	r25
 988:	ef 93       	push	r30
 98a:	ff 93       	push	r31
 98c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 990:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 994:	8c 71       	andi	r24, 0x1C	; 28
 996:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <UART_RxHead>
 99a:	ef 5f       	subi	r30, 0xFF	; 255
 99c:	ef 73       	andi	r30, 0x3F	; 63
 99e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_RxTail>
 9a2:	e9 17       	cp	r30, r25
 9a4:	39 f0       	breq	.+14     	; 0x9b4 <__vector_18+0x3c>
 9a6:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <UART_RxHead>
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	e6 5d       	subi	r30, 0xD6	; 214
 9ae:	fe 4f       	sbci	r31, 0xFE	; 254
 9b0:	20 83       	st	Z, r18
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__vector_18+0x3e>
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_LastRxError>
 9ba:	89 2b       	or	r24, r25
 9bc:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <UART_LastRxError>
 9c0:	ff 91       	pop	r31
 9c2:	ef 91       	pop	r30
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	2f 91       	pop	r18
 9ca:	0f 90       	pop	r0
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	0f 90       	pop	r0
 9d0:	1f 90       	pop	r1
 9d2:	18 95       	reti

000009d4 <__vector_19>:
 9d4:	1f 92       	push	r1
 9d6:	0f 92       	push	r0
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	0f 92       	push	r0
 9dc:	11 24       	eor	r1, r1
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	ef 93       	push	r30
 9e4:	ff 93       	push	r31
 9e6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_TxHead>
 9ea:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UART_TxTail>
 9ee:	98 17       	cp	r25, r24
 9f0:	69 f0       	breq	.+26     	; 0xa0c <__vector_19+0x38>
 9f2:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <UART_TxTail>
 9f6:	ef 5f       	subi	r30, 0xFF	; 255
 9f8:	ef 73       	andi	r30, 0x3F	; 63
 9fa:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <UART_TxTail>
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	e6 59       	subi	r30, 0x96	; 150
 a02:	fe 4f       	sbci	r31, 0xFE	; 254
 a04:	80 81       	ld	r24, Z
 a06:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 a0a:	05 c0       	rjmp	.+10     	; 0xa16 <__vector_19+0x42>
 a0c:	e1 ec       	ldi	r30, 0xC1	; 193
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	8f 7d       	andi	r24, 0xDF	; 223
 a14:	80 83       	st	Z, r24
 a16:	ff 91       	pop	r31
 a18:	ef 91       	pop	r30
 a1a:	9f 91       	pop	r25
 a1c:	8f 91       	pop	r24
 a1e:	0f 90       	pop	r0
 a20:	0f be       	out	0x3f, r0	; 63
 a22:	0f 90       	pop	r0
 a24:	1f 90       	pop	r1
 a26:	18 95       	reti

00000a28 <uart_init>:
 a28:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <UART_TxHead>
 a2c:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <UART_TxTail>
 a30:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <UART_RxHead>
 a34:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_RxTail>
 a38:	28 2f       	mov	r18, r24
 a3a:	39 2f       	mov	r19, r25
 a3c:	33 23       	and	r19, r19
 a3e:	1c f4       	brge	.+6      	; 0xa46 <uart_init+0x1e>
 a40:	22 e0       	ldi	r18, 0x02	; 2
 a42:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 a46:	90 78       	andi	r25, 0x80	; 128
 a48:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 a4c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 a50:	88 e9       	ldi	r24, 0x98	; 152
 a52:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 a56:	86 e0       	ldi	r24, 0x06	; 6
 a58:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 a5c:	08 95       	ret

00000a5e <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 a5e:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <UART_TxHead>
 a62:	2f 5f       	subi	r18, 0xFF	; 255
 a64:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 a66:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <UART_TxTail>
 a6a:	29 17       	cp	r18, r25
 a6c:	e1 f3       	breq	.-8      	; 0xa66 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 a6e:	e2 2f       	mov	r30, r18
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	e6 59       	subi	r30, 0x96	; 150
 a74:	fe 4f       	sbci	r31, 0xFE	; 254
 a76:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 a78:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 a7c:	e1 ec       	ldi	r30, 0xC1	; 193
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	80 62       	ori	r24, 0x20	; 32
 a84:	80 83       	st	Z, r24
 a86:	08 95       	ret

00000a88 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 a88:	cf 93       	push	r28
 a8a:	df 93       	push	r29
 a8c:	ec 01       	movw	r28, r24
    while (*s)
 a8e:	03 c0       	rjmp	.+6      	; 0xa96 <uart_puts+0xe>
        uart_putc(*s++);
 a90:	21 96       	adiw	r28, 0x01	; 1
 a92:	0e 94 2f 05 	call	0xa5e	; 0xa5e <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 a96:	88 81       	ld	r24, Y
 a98:	81 11       	cpse	r24, r1
 a9a:	fa cf       	rjmp	.-12     	; 0xa90 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 a9c:	df 91       	pop	r29
 a9e:	cf 91       	pop	r28
 aa0:	08 95       	ret

00000aa2 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 aa2:	cf 93       	push	r28
 aa4:	df 93       	push	r29
 aa6:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <uart_puts_p+0xe>
        uart_putc(c);
 aaa:	0e 94 2f 05 	call	0xa5e	; 0xa5e <uart_putc>
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 aae:	fe 01       	movw	r30, r28
 ab0:	ef 01       	movw	r28, r30
 ab2:	21 96       	adiw	r28, 0x01	; 1
 ab4:	84 91       	lpm	r24, Z
 ab6:	81 11       	cpse	r24, r1
 ab8:	f8 cf       	rjmp	.-16     	; 0xaaa <uart_puts_p+0x8>
        uart_putc(c);
}/* uart_puts_p */
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	08 95       	ret

00000ac0 <__udivmodhi4>:
 ac0:	aa 1b       	sub	r26, r26
 ac2:	bb 1b       	sub	r27, r27
 ac4:	51 e1       	ldi	r21, 0x11	; 17
 ac6:	07 c0       	rjmp	.+14     	; 0xad6 <__udivmodhi4_ep>

00000ac8 <__udivmodhi4_loop>:
 ac8:	aa 1f       	adc	r26, r26
 aca:	bb 1f       	adc	r27, r27
 acc:	a6 17       	cp	r26, r22
 ace:	b7 07       	cpc	r27, r23
 ad0:	10 f0       	brcs	.+4      	; 0xad6 <__udivmodhi4_ep>
 ad2:	a6 1b       	sub	r26, r22
 ad4:	b7 0b       	sbc	r27, r23

00000ad6 <__udivmodhi4_ep>:
 ad6:	88 1f       	adc	r24, r24
 ad8:	99 1f       	adc	r25, r25
 ada:	5a 95       	dec	r21
 adc:	a9 f7       	brne	.-22     	; 0xac8 <__udivmodhi4_loop>
 ade:	80 95       	com	r24
 ae0:	90 95       	com	r25
 ae2:	bc 01       	movw	r22, r24
 ae4:	cd 01       	movw	r24, r26
 ae6:	08 95       	ret

00000ae8 <__itoa_ncheck>:
 ae8:	bb 27       	eor	r27, r27
 aea:	4a 30       	cpi	r20, 0x0A	; 10
 aec:	31 f4       	brne	.+12     	; 0xafa <__itoa_ncheck+0x12>
 aee:	99 23       	and	r25, r25
 af0:	22 f4       	brpl	.+8      	; 0xafa <__itoa_ncheck+0x12>
 af2:	bd e2       	ldi	r27, 0x2D	; 45
 af4:	90 95       	com	r25
 af6:	81 95       	neg	r24
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__utoa_common>

00000afe <__utoa_ncheck>:
 afe:	bb 27       	eor	r27, r27

00000b00 <__utoa_common>:
 b00:	fb 01       	movw	r30, r22
 b02:	55 27       	eor	r21, r21
 b04:	aa 27       	eor	r26, r26
 b06:	88 0f       	add	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	aa 1f       	adc	r26, r26
 b0c:	a4 17       	cp	r26, r20
 b0e:	10 f0       	brcs	.+4      	; 0xb14 <__utoa_common+0x14>
 b10:	a4 1b       	sub	r26, r20
 b12:	83 95       	inc	r24
 b14:	50 51       	subi	r21, 0x10	; 16
 b16:	b9 f7       	brne	.-18     	; 0xb06 <__utoa_common+0x6>
 b18:	a0 5d       	subi	r26, 0xD0	; 208
 b1a:	aa 33       	cpi	r26, 0x3A	; 58
 b1c:	08 f0       	brcs	.+2      	; 0xb20 <__utoa_common+0x20>
 b1e:	a9 5d       	subi	r26, 0xD9	; 217
 b20:	a1 93       	st	Z+, r26
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	79 f7       	brne	.-34     	; 0xb04 <__utoa_common+0x4>
 b26:	b1 11       	cpse	r27, r1
 b28:	b1 93       	st	Z+, r27
 b2a:	11 92       	st	Z+, r1
 b2c:	cb 01       	movw	r24, r22
 b2e:	0c 94 99 05 	jmp	0xb32	; 0xb32 <strrev>

00000b32 <strrev>:
 b32:	dc 01       	movw	r26, r24
 b34:	fc 01       	movw	r30, r24
 b36:	67 2f       	mov	r22, r23
 b38:	71 91       	ld	r23, Z+
 b3a:	77 23       	and	r23, r23
 b3c:	e1 f7       	brne	.-8      	; 0xb36 <strrev+0x4>
 b3e:	32 97       	sbiw	r30, 0x02	; 2
 b40:	04 c0       	rjmp	.+8      	; 0xb4a <strrev+0x18>
 b42:	7c 91       	ld	r23, X
 b44:	6d 93       	st	X+, r22
 b46:	70 83       	st	Z, r23
 b48:	62 91       	ld	r22, -Z
 b4a:	ae 17       	cp	r26, r30
 b4c:	bf 07       	cpc	r27, r31
 b4e:	c8 f3       	brcs	.-14     	; 0xb42 <strrev+0x10>
 b50:	08 95       	ret

00000b52 <_exit>:
 b52:	f8 94       	cli

00000b54 <__stop_program>:
 b54:	ff cf       	rjmp	.-2      	; 0xb54 <__stop_program>
